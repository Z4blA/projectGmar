/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 12.01.2025 07:15:51

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 12940, -35564, -25295, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00041538695222698152, 0.00017387830303050578, 0.00021061631559859961, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 31,31,36,-54,-34,25,-3,9,-16,21,13,-11,-23,-22,17,-6,-31,127,16,46,-38,-21,-10,-9,-41,28,-22,3,21,-10,-8,-16, 
  /* [1][0][][] */ 76,-29,-45,47,7,108,1,2,127,-12,10,-56,-44,101,47,-35,95,-85,22,-77,-87,49,117,74,41,44,19,8,-45,-24,-4,-2, 
  /* [2][0][][] */ -10,63,-49,53,61,-41,-12,89,75,32,85,20,-67,-55,56,92,-59,-127,14,-74,61,72,-29,-67,47,-28,-2,-75,31,-47,63,-4, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0080670751631259918, 0.003376825712621212, 0.0040903007611632347, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -690, -72, -1375, -400, -159, -278, -1140, -199, -411, -1239, -638, -1663, -1290, -1277, -357, -143, -997, 750, -1032, -1386, -731, -721, -680, -1520, -186, -1173, -1193, -1564, -1469, -1373, -954, -1344, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.2016494009876624e-05, 6.9477202487178147e-05, 5.4167470807442442e-05, 6.7208486143499613e-05, 5.7106888561975211e-05, 6.3658953877165914e-05, 5.0343980547040701e-05, 6.139272591099143e-05, 6.4817293605301529e-05, 5.1719987823162228e-05, 5.1247687224531546e-05, 4.8377329221693799e-05, 5.2829727792413905e-05, 4.8376696213381365e-05, 5.9995138144586235e-05, 6.998885510256514e-05, 4.8663994675735012e-05, 0.0002160671865567565, 5.2446466725086793e-05, 5.1367540436331183e-05, 5.8544988860376179e-05, 6.7162451159674674e-05, 6.2058054027147591e-05, 5.1619983423734084e-05, 5.4526532039744779e-05, 5.1933428039774299e-05, 5.0536335038486868e-05, 5.7194047258235514e-05, 5.4574458772549406e-05, 5.3412812121678144e-05, 4.8693502321839333e-05, 5.5267017160076648e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -58,-69,68,-3,66,-36,-89,-105,19,-98,-116,-10,30,11,-38,18,-63,-45,-30,-43,-35,-64,-24,80,-119,-22,54,-60,90,-18,-45,-94,66,-74,-82,53,-93,-95,-104,6,34,-99,-72,66,33,-127,61,-48,-10,-22,-55,53,-78,-68,-100,75,-6,39,70,-115,-71,52,-72,14,-31,-9,58,56,16,74,63,-116,65,-126,13,56,-102,23,-79,31,34,-2,44,-31,-79,-69,-99,84,-3,62,-38,-107,26,74,2,4, 
  /* [1][0][][] */ -38,26,-35,0,-18,58,18,11,45,-77,-64,78,47,-26,25,37,67,-31,19,61,-37,5,21,26,30,2,-23,76,-2,0,62,-33,46,67,-8,15,30,13,-18,-34,-53,-8,-44,-52,-27,6,-29,-37,-24,-74,60,30,12,64,-53,-23,10,67,36,60,-41,82,-59,-52,-31,31,37,34,74,23,7,3,-64,64,-32,25,61,-39,-35,37,-46,34,-26,-127,17,62,-37,-50,42,1,34,23,41,40,-50,-34, 
  /* [2][0][][] */ 7,-5,-75,44,-51,-78,35,44,-115,34,-60,61,38,-37,30,-120,-80,-57,2,7,-113,-43,60,-18,-14,29,48,-25,-90,28,34,42,-89,-49,-108,-120,-101,59,60,-55,-127,-86,-23,-37,-100,61,-43,-82,43,4,40,-104,-67,19,-15,-16,-88,41,-73,-28,-49,15,-61,26,42,4,2,36,-106,21,-25,-91,-5,-71,-7,-12,-77,-55,-30,-26,-1,-104,-37,-54,-26,-113,-41,-56,51,108,-37,-27,-67,-98,-65,-5, 
  /* [3][0][][] */ 31,22,1,-49,-36,31,-75,22,58,10,54,-15,68,38,63,-7,84,84,-32,21,89,-49,-45,-48,-5,-75,-47,88,29,-72,39,14,-20,-23,-7,-6,-55,-82,-16,58,-22,-100,-68,17,47,6,-75,-111,76,-66,8,-16,45,20,44,-68,-78,-58,-122,-23,-46,21,-31,24,30,-15,-42,-17,-19,-59,12,71,7,-90,26,-45,40,84,77,-38,-67,-127,-6,42,-4,35,-68,-78,-58,-23,-57,-66,41,-76,-52,-20, 
  /* [4][0][][] */ 32,94,11,32,-9,-12,17,16,57,55,5,52,35,-42,8,-57,-13,3,-63,11,82,-54,74,42,-8,-12,57,-25,-43,22,-53,-28,70,88,18,-81,-24,-88,-126,56,-60,-80,-85,-50,25,57,-16,-27,30,-48,-53,-73,-57,48,-101,29,4,-55,19,27,11,-42,-53,-62,-30,54,-15,-19,30,-79,-63,-58,-32,1,75,24,65,-17,0,-41,12,-79,-104,-105,4,45,77,-5,-94,-127,-15,47,-2,43,-118,-62, 
  /* [5][0][][] */ 78,-51,17,28,20,-85,25,32,87,-59,11,-55,22,68,32,24,51,74,-57,76,34,46,25,-11,-116,-43,4,-61,38,18,-17,-56,-23,6,-32,2,-81,-65,-15,32,-59,-72,6,75,-6,25,16,-96,-39,62,-6,-7,12,-2,20,-8,57,44,-57,-15,42,-51,31,-82,-39,64,2,14,41,-18,81,-37,-34,-16,-10,-60,14,-29,29,59,49,1,-49,59,-40,62,-23,33,20,-127,56,56,-15,21,73,-102, 
  /* [6][0][][] */ -10,-63,72,40,-96,-80,-27,31,-37,-95,-19,-100,48,34,73,-126,10,-23,-25,62,-85,-125,69,25,-8,-94,-32,-74,-48,-121,15,-91,-102,-127,-63,-113,-32,11,-117,44,49,24,-4,-38,-121,65,-99,-63,-96,-5,-47,-75,26,-71,55,-47,-18,-31,-80,71,-106,-24,33,-85,-68,31,60,-66,42,-29,-113,-28,23,-79,-101,-59,-93,-111,-70,-39,4,-47,13,-36,-85,-98,-58,-105,51,68,59,-11,-67,-51,42,29, 
  /* [7][0][][] */ 82,62,-20,-34,-42,90,-16,7,87,-7,-62,25,52,-84,50,48,43,18,-12,74,35,37,-1,78,-47,56,39,55,-63,72,-14,38,32,23,48,64,-72,11,-31,-4,50,-74,16,62,37,-18,45,-101,46,-62,-95,-62,-13,75,7,32,64,-50,-6,-24,10,9,30,-85,-45,-26,42,27,-66,19,45,59,69,2,43,32,-28,38,-71,26,66,-58,-19,-127,62,10,-75,59,37,-71,14,57,-58,-50,-78,-127, 
  /* [8][0][][] */ 12,47,-35,-76,46,26,-47,-4,35,29,44,76,21,-56,-33,-48,-28,89,-51,21,37,-2,62,98,-114,45,51,71,-51,13,-67,96,80,-12,41,-15,83,-55,-55,74,41,30,-105,-54,11,-27,-37,17,45,-89,-71,-41,-41,2,-25,-58,-8,92,-80,93,100,42,-4,57,-22,-16,-6,75,-49,31,25,7,61,-3,15,-4,-6,83,82,53,16,1,-102,-119,22,23,44,-16,-25,-109,-127,79,-79,-85,-66,-63, 
  /* [9][0][][] */ -20,-13,92,17,41,-97,-76,-117,19,2,-26,44,-41,-102,-106,-60,-17,-38,-100,-95,-21,49,-87,-97,42,-48,-35,14,-61,-78,-99,70,31,-21,-4,-59,-82,-22,-69,-40,-4,-102,11,-78,56,-26,-115,10,-5,-47,-113,-89,46,-74,-102,72,29,-66,-54,-11,-87,84,41,-92,-100,-8,33,14,-49,61,67,-96,-14,40,-113,-118,-72,-127,-56,52,10,-2,55,-23,-59,-116,41,-31,52,-17,-73,82,42,-39,5,-67, 
  /* [10][0][][] */ -64,66,52,-76,-17,69,77,27,19,14,16,-59,82,51,-18,-9,-32,68,-107,-64,-24,42,27,-58,-5,35,-102,-98,-51,49,-102,-68,69,76,94,60,-56,-62,-64,38,-50,64,-127,-32,-108,-73,-21,-86,10,9,-2,-17,35,4,-73,-30,-100,-11,2,-43,-15,60,68,11,84,-68,-87,-17,20,-22,-86,-66,70,-9,-84,70,-19,52,39,-4,44,-44,21,-4,-103,34,68,-51,10,-58,-48,-63,-69,-67,-119,-127, 
  /* [11][0][][] */ 59,-22,-50,59,74,45,17,33,59,44,-98,73,-44,-114,-14,-85,-77,-79,25,3,-14,28,-12,-127,-107,-124,-6,25,36,-47,-13,-55,-114,-104,8,5,-72,40,-52,-82,-60,58,-81,-23,-68,-70,-119,-98,67,55,64,16,-115,-108,-7,-15,-89,-82,-45,-108,-97,39,48,4,-9,46,-85,-13,38,26,-113,-103,-4,70,-123,43,-89,30,-69,38,-122,-52,-70,-66,2,-99,-16,-26,-114,-17,-30,-118,-113,-63,-93,-55, 
  /* [12][0][][] */ -18,25,-71,-30,40,-20,-59,-5,-96,15,-42,-18,-68,-22,6,-94,-113,-61,-74,-102,-14,-44,-14,46,-69,-72,48,-110,44,-19,-55,64,-103,-87,-71,-16,-34,-86,-41,3,66,11,-127,-63,-48,-98,-66,70,-72,-127,-89,65,1,-26,-97,39,-32,-80,17,25,14,63,-25,18,62,-2,-72,65,17,49,0,27,38,68,-44,-34,-61,-8,-126,-110,-77,64,10,13,-57,-5,18,63,-100,-112,50,5,58,-22,1,84, 
  /* [13][0][][] */ 81,-73,59,47,60,73,51,31,48,-76,-19,-50,56,60,38,-72,-127,-71,-61,18,58,-19,72,-63,-95,32,-15,-5,-91,-99,36,8,19,69,-29,12,-102,-51,-17,42,-75,35,-78,-12,-53,8,-9,-88,53,86,-66,-127,-118,3,57,-92,-82,4,-65,-92,-44,80,-92,-29,-80,-80,-74,51,-62,-56,63,-23,-108,5,-89,-69,-116,66,63,-77,15,-123,15,-22,-97,-75,38,61,-19,-62,-88,24,86,-66,38,-35, 
  /* [14][0][][] */ -34,-62,71,36,56,-12,-23,-81,-41,-61,59,71,-8,-66,-42,-70,-39,-43,-33,3,-30,45,0,58,-122,-87,-9,33,-102,-94,-64,45,84,-11,-26,-7,64,12,-13,-64,-43,-126,-10,79,52,-94,15,-110,74,1,28,12,73,-4,-44,25,-55,17,0,90,-4,-48,-72,25,-64,2,51,-70,-51,-82,-59,63,13,-7,40,-79,57,-97,43,24,30,-62,-127,-79,-71,-95,-78,75,49,-67,5,-28,36,58,-50,-14, 
  /* [15][0][][] */ 10,-8,-6,47,65,-43,33,-59,35,-15,-41,22,75,-8,-42,-72,58,2,-84,4,24,21,45,80,48,33,28,70,5,34,41,-52,14,9,-39,-3,-39,11,50,-31,-2,55,-57,-5,12,-69,-39,-70,-8,-69,-16,14,-55,-47,-41,6,34,41,-36,79,-30,-28,-17,58,-16,71,-57,13,-25,9,37,-47,20,-34,34,-71,11,28,58,44,-44,16,-87,-99,-72,-38,-50,14,49,-2,-95,-14,24,58,-127,33, 
  /* [16][0][][] */ -71,0,58,-94,19,82,-51,18,56,65,-95,38,-20,-48,-56,-62,100,94,18,69,108,69,-38,40,-71,34,-58,45,-102,4,1,2,-103,59,48,37,-34,-18,-80,-56,25,-83,53,76,68,95,60,-63,-16,-119,-20,73,-61,76,25,24,0,77,10,5,120,78,37,16,23,-4,-24,60,16,54,-33,-8,11,14,52,57,-17,99,-78,-9,-15,-127,-9,23,-1,100,49,17,32,-34,-38,85,40,-23,-29,-27, 
  /* [17][0][][] */ 1,-39,39,30,-10,-27,-9,-7,-8,-21,14,6,17,32,-27,13,-6,-1,24,22,-30,0,9,-26,42,21,-17,-4,37,9,2,9,-15,-10,11,8,14,54,56,-15,-21,12,49,-15,-12,0,21,50,2,24,24,127,12,6,25,-13,-7,12,7,-31,-6,-20,37,31,-5,-23,14,-23,-15,-1,30,10,8,19,-4,32,12,-29,3,20,27,4,50,18,-15,-5,26,2,61,91,24,-26,2,31,15,73, 
  /* [18][0][][] */ -85,52,95,-47,-22,-87,-104,-8,-44,46,-108,-29,-47,9,27,-65,-1,-50,69,-62,42,-56,12,-78,-31,-104,-32,75,-1,0,6,35,13,-41,-114,-123,-59,54,-57,47,-61,-10,-90,-18,-115,-14,20,-48,-20,-25,34,-2,-82,-35,-12,81,-65,18,3,-107,43,85,-42,23,-53,-108,-68,56,47,-59,-91,65,-85,1,-96,-112,29,-5,-40,-103,-54,-14,-57,-84,84,-79,78,19,-127,-108,-77,85,48,-90,11,-11, 
  /* [19][0][][] */ -12,-6,34,5,21,-94,54,46,38,-79,-5,-36,-108,-6,-77,27,34,-112,58,19,-57,32,-69,-18,114,-95,-2,-84,-108,-127,-77,13,36,-97,-3,-43,-19,-85,-67,-109,11,-115,-100,-19,-98,0,33,-69,-47,1,-56,24,-53,-17,-19,-35,-23,56,-17,-52,19,-72,65,29,-82,-29,-57,-32,-35,21,29,-68,-80,-110,-75,-95,-49,-127,-17,51,20,-119,-48,122,-102,-27,-17,-29,36,73,-32,26,-67,57,36,-18, 
  /* [20][0][][] */ -35,47,66,57,-63,68,-8,18,-4,-38,-79,4,-13,25,20,-67,-49,-52,-76,-45,-4,-67,-66,-51,93,-85,-88,39,-18,1,-35,73,69,19,-30,26,28,-68,-35,-85,-83,-50,-80,-80,-42,-69,-91,78,26,-127,-83,28,32,90,18,-9,55,45,64,61,59,-36,-70,-41,-17,-46,-66,8,-65,-67,-61,37,-54,-47,3,1,80,50,58,68,64,-29,56,-90,26,81,-8,42,16,43,-7,48,-11,-9,-65,-9, 
  /* [21][0][][] */ 48,45,27,-106,47,-78,28,2,-3,-58,-53,23,0,6,-28,-80,-94,-26,-31,-31,53,-30,29,-54,4,-82,-27,40,-23,-15,-36,-18,2,4,-70,-90,45,3,-127,-18,-40,-38,-22,-10,-79,-72,-87,8,-23,-66,-54,3,-3,34,-112,13,-63,28,-58,81,22,-55,-39,-44,24,15,-45,-52,-83,-58,33,31,14,-70,35,4,-71,-42,29,55,-16,11,-10,-106,5,-99,21,-86,-98,-4,21,-77,-54,-67,-20,-78, 
  /* [22][0][][] */ 14,-39,-82,-93,43,-48,75,3,-52,52,-41,-90,74,-103,-79,-78,29,79,-120,-36,75,-74,30,16,30,-26,-73,58,-53,-69,-77,-72,26,40,9,-6,-8,-39,-110,-72,-3,-51,-16,68,52,-66,22,-58,-15,-65,-21,-49,-65,-88,-56,15,-45,-19,-27,-20,94,-65,-47,-127,-72,0,-65,-51,64,48,-18,8,-62,-26,45,-86,27,-41,65,61,48,-94,-119,-78,36,62,25,-14,-86,12,-100,32,2,21,16,29, 
  /* [23][0][][] */ 19,-111,-28,10,49,-126,-26,-90,13,-68,26,29,-25,-114,-27,-56,36,-72,-98,50,43,-83,58,-60,-19,-31,34,-11,52,6,33,-64,-69,-2,-20,3,55,1,-66,-25,-60,-21,-25,-121,-86,-68,86,16,76,-97,-63,-67,41,-81,-25,44,-80,-51,62,1,-122,-105,-49,-34,-2,-2,-94,-127,14,-62,58,-100,-37,-32,-61,-99,8,-9,45,73,-79,-79,10,-65,52,23,63,-37,-74,73,73,-38,77,-77,-17,60, 
  /* [24][0][][] */ -79,-32,-84,-95,-83,-127,-79,-109,70,68,57,-32,81,39,-35,-121,-119,19,-31,-53,82,-68,-42,-19,76,-47,31,51,78,22,-25,-62,3,-9,20,-9,-61,-107,2,-32,-118,-114,39,9,20,-28,-20,22,-105,-35,-55,-40,30,38,41,-56,-10,38,-19,1,56,-26,-10,61,-108,78,-73,-86,-104,0,-33,-37,-47,-12,58,54,61,-95,-80,-63,-85,-121,-53,-93,-6,50,-35,-82,44,-99,-24,-79,-38,-5,-53,30, 
  /* [25][0][][] */ -99,-76,-95,-32,50,-85,-109,12,8,-120,-61,-8,33,-39,-118,-46,-84,28,54,-104,27,28,-34,-75,-45,-72,-108,4,39,-101,5,69,47,-118,12,25,59,-26,-47,-39,-97,54,-77,-25,58,-3,18,62,-96,42,-85,-26,10,-48,-76,-18,-53,19,-117,34,74,9,73,11,-26,34,-26,-33,-102,-22,-57,-118,1,-68,34,-7,31,58,-10,-10,15,16,-13,36,-93,-66,-114,-99,-59,-2,74,-8,-127,-36,-38,-32, 
  /* [26][0][][] */ 21,-124,-44,-37,-109,-29,-35,-36,-116,-127,66,48,-92,-66,-16,-37,71,0,-94,-83,-14,38,59,-14,-4,29,-14,14,-14,-20,-103,-26,-52,-77,-109,-110,-80,46,-68,68,-108,61,23,2,-87,36,-59,62,-44,-7,-29,62,-16,-66,-28,-115,60,29,21,-3,-23,-106,34,-43,72,-42,-72,23,-99,41,48,57,43,-109,-98,-19,14,-120,-107,-16,-49,37,44,-88,43,-32,-63,-13,-95,72,-17,-10,-71,100,18,26, 
  /* [27][0][][] */ -29,-18,-75,-109,-112,-76,-73,-25,-9,37,-3,-102,-53,2,24,-45,18,-38,10,-89,-111,-32,-44,-40,-36,-6,-106,-25,9,-10,-46,-38,10,19,-104,-105,-50,-77,-90,42,-95,-10,14,-10,47,-9,10,66,45,11,24,-25,-90,-102,37,-57,65,-45,-72,-86,-66,-70,-52,81,7,-63,-120,45,2,-18,-127,-25,16,-65,-32,-97,13,-23,34,43,39,-56,81,-32,-89,-24,-46,0,-46,32,-67,-61,1,-12,104,19, 
  /* [28][0][][] */ 38,-39,77,36,-104,-56,-106,-54,-31,-93,10,20,-100,-94,-11,46,62,56,-78,50,-32,-9,-111,-77,-90,54,-83,-31,-58,-41,-32,-46,-111,-22,29,36,39,-60,-8,-9,67,36,-97,9,-59,-44,-16,43,2,-76,-72,-47,-103,-12,34,4,26,-41,37,5,-25,-24,-89,-27,38,50,-30,47,-58,16,-113,-47,26,34,-40,-86,-127,-66,-94,33,-63,-86,62,-15,22,-123,25,-61,-79,-55,-29,-85,-52,20,-76,-43, 
  /* [29][0][][] */ 14,6,21,-68,-101,-17,-126,-23,37,-44,-103,-103,53,-106,-73,-62,-110,47,-2,-86,-96,-58,16,-28,-5,-26,-66,-54,-112,-37,57,-33,6,-30,-96,-76,-41,70,-25,45,8,65,-65,35,-33,60,-59,-33,-23,-32,18,-102,31,-113,60,10,-106,14,-58,54,-127,47,-97,-67,-76,-81,10,41,48,-97,-5,-89,61,50,19,-8,59,-84,-61,-5,-31,-92,-33,-77,26,56,13,32,-47,116,62,35,-111,-1,-32,116, 
  /* [30][0][][] */ -4,-57,-77,3,-89,13,-61,-12,83,-23,-6,-41,-115,-15,28,8,-23,31,67,-100,13,-111,-101,2,-98,3,-61,98,-29,-96,-84,-17,-95,-87,-127,-72,14,-36,-4,21,79,-69,-16,85,80,-58,66,47,-62,35,13,-92,83,-46,-14,63,-84,-54,-72,-62,-93,-10,-66,-28,-100,-86,-88,56,-76,74,13,-37,-89,85,31,-82,-70,-64,-68,-73,6,-8,-95,-19,-116,26,-100,94,-36,-102,40,40,-52,-18,4,-84, 
  /* [31][0][][] */ 35,-106,4,56,14,24,-73,-100,-63,-39,-89,-91,49,-127,-70,64,-73,-100,65,7,13,-5,-49,56,85,-114,2,2,-80,-86,15,57,-17,-13,-102,-39,49,10,-72,-113,25,-75,-45,-3,-26,-63,-49,69,22,-13,50,-43,-112,-78,-85,-7,-115,27,-20,60,-59,-29,76,-81,32,59,-65,-90,30,-116,-126,-18,-102,-11,-27,-18,-76,-60,3,32,-82,-57,85,35,16,43,-97,-16,-12,7,-91,-68,-17,56,-26,10, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022107008844614029, 0.0029527810402214527, 0.0023021174129098654, 0.0028563607484102249, 0.0024270426947623491, 0.002705505583435297, 0.0021396190859377384, 0.0026091907639056444, 0.0027547348290681839, 0.0021980993915349245, 0.0021780265960842371, 0.002056036377325654, 0.0022452634293586016, 0.0020560096018016338, 0.0025497933384031057, 0.0029745262581855059, 0.0020682197064161301, 0.009182855486869812, 0.0022289748303592205, 0.0021831204649060965, 0.0024881619028747082, 0.0028544042725116014, 0.0026374673470854759, 0.0021938493009656668, 0.0023173775989562273, 0.0022071707062423229, 0.0021477942354977131, 0.0024307470303028822, 0.0023194144014269114, 0.0022700445260852575, 0.0020694737322628498, 0.0023488481529057026, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 110, -168, 1892, 4022, 2834, -1358, 2679, -1493, -1778, -1159, 2195, -1004, 2166, 4337, 788, 1481, -193, -321, -814, 2961, 977, -1136, 813, -563, -78, 1572, 589, 1205, 5452, 1400, 3566, 332, 1105, 2022, 3430, 1560, -371, 1713, 2051, -1676, -650, 675, 666, 859, -757, 63, -1126, 987, -3487, 1916, 1026, -1435, 4974, -743, 1760, 559, 307, 595, -254, -1563, 0, 665, 143, 3540, 3458, 1378, 2319, 3430, 2955, -1142, 2457, 2707, 2073, -2204, 3530, 3571, 309, -2119, 231, 744, 5511, 1193, 458, -1224, 174, 45, 1080, -2321, 2567, 401, 2987, 237, -639, -2959, 131, 1572, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00024683753144927323, 0.00031331696663983166, 0.00025112499133683741, 0.00019597410573624074, 0.0001842773926910013, 0.00032348401146009564, 0.00019739063282031566, 0.00022897767485119402, 0.00025058418395929039, 0.00031259970273822546, 0.00033157388679683208, 0.0004531634331215173, 0.00021646918321494013, 0.00014102838758844882, 0.0002766396792139858, 0.00038110985769890249, 0.0005577199044637382, 0.0004067130503244698, 0.00025291231577284634, 0.00020172088989056647, 0.00036731665022671223, 0.00020493839110713452, 0.00019056620658375323, 0.00026229704963043332, 0.00031816819682717323, 0.00035299774026498199, 0.00022481790801975876, 0.00026891802554018795, 0.00014932810154277831, 0.0002869509335141629, 0.00013888857210986316, 0.0003244889376219362, 0.00024631436099298298, 0.00029039246146567166, 0.00019234564388170838, 0.00028461118927225471, 0.00027577561559155583, 0.0002397966745775193, 0.00033035266096703708, 0.00033902149880304933, 0.000273129902780056, 0.00020890020823571831, 0.00027294742176309228, 0.00027677477919496596, 0.00029126726440154016, 0.00028120822389610112, 0.00023424022947438061, 0.00025851908139884472, 0.00021757166541647166, 0.0002035386860370636, 0.00025684654247015715, 0.00031950423726812005, 0.00013826641952618957, 0.00026936244103126228, 0.00019384770712349564, 0.00030608760425820947, 0.00032317871227860451, 0.00032734460546635091, 0.00027743144892156124, 0.0002275666338391602, 0.00045429781312122941, 0.00022882218763697892, 0.00038032355951145291, 0.00014483678387477994, 0.00017676869174465537, 0.0002584513567853719, 0.00015262445958796889, 0.00016671534103807062, 0.0002123479061992839, 0.00021438251133076847, 0.00015310895105358213, 0.00024870794732123613, 0.00015424337470903993, 0.00017483618285041302, 0.00017580616986379027, 0.00021003778965678066, 0.00021751942404080182, 0.00029404769884422421, 0.00032679794821888208, 0.00017136457609012723, 0.00013922323705628514, 0.00026243444881401956, 0.00022785009059589356, 0.00024111413222271949, 0.00017833015590440482, 0.00025551280123181641, 0.0001861582713900134, 0.0002393228787695989, 0.00022573686146643013, 0.00035589141771197319, 0.0002013266202993691, 0.0003642854280769825, 0.00015911032096482813, 0.00016019880422390997, 0.00034493481507524848, 0.00028672977350652218, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -10,127,-85,55,49,-49,102,67,-78,27,17,-94,69,125,-47,-2, 
  /* [1][0][][] */ -33,-14,-40,-24,-16,76,30,-127,6,-49,-12,-51,-6,-36,-67,18, 
  /* [2][0][][] */ -28,-19,49,89,39,69,-118,127,-6,15,73,-68,-34,-62,-29,60, 
  /* [3][0][][] */ 95,-58,95,18,6,-11,-45,127,-2,68,34,23,2,33,17,-14, 
  /* [4][0][][] */ -30,-1,-46,44,-89,-26,-23,-127,-26,-4,29,-11,24,61,113,88, 
  /* [5][0][][] */ 121,16,-22,-14,-74,-4,24,73,-10,-9,59,89,127,25,-81,10, 
  /* [6][0][][] */ 30,-33,-79,-47,-99,10,-11,-35,-33,-47,-43,6,110,35,127,-15, 
  /* [7][0][][] */ -41,50,-18,-65,13,-60,-99,20,-89,74,-92,-86,-127,-42,32,78, 
  /* [8][0][][] */ 35,31,72,3,42,43,77,9,48,-27,45,1,-127,-28,-79,17, 
  /* [9][0][][] */ -16,71,32,-41,-34,-21,1,-4,-24,77,-63,8,75,127,27,20, 
  /* [10][0][][] */ 53,45,-68,35,-61,-68,62,-49,-67,-47,-37,-63,-127,-45,5,76, 
  /* [11][0][][] */ 34,-4,47,-4,-26,-1,23,120,-99,11,-26,10,-33,-13,50,127, 
  /* [12][0][][] */ -59,-11,36,-1,35,7,127,27,-54,32,0,-20,-41,71,-34,68, 
  /* [13][0][][] */ -5,-29,66,60,58,7,80,73,-28,84,-127,-81,42,52,-70,-52, 
  /* [14][0][][] */ -84,127,47,-7,28,57,29,-10,-23,52,88,-30,-79,51,-34,19, 
  /* [15][0][][] */ -21,-23,-127,-58,57,-44,-67,-35,-35,-35,-1,-47,1,-60,-49,55, 
  /* [16][0][][] */ 81,-29,-7,-32,11,-29,58,-27,-46,-6,127,63,8,-15,-43,31, 
  /* [17][0][][] */ -5,-2,-38,-57,-40,-81,127,-72,8,-28,-44,45,0,34,16,37, 
  /* [18][0][][] */ 35,125,-12,-77,39,-72,-39,-72,-16,127,-34,-11,-10,32,-24,-29, 
  /* [19][0][][] */ -91,-127,89,-90,20,-118,55,-33,19,16,95,121,18,-11,36,-12, 
  /* [20][0][][] */ -24,57,31,-3,-14,-27,33,-34,37,-19,84,-4,-127,-16,-49,3, 
  /* [21][0][][] */ -61,57,-19,-10,53,28,64,56,-127,66,-36,6,-1,-10,-92,-32, 
  /* [22][0][][] */ 28,-54,54,36,45,-127,91,10,-9,-24,-61,-85,42,-62,-20,-69, 
  /* [23][0][][] */ -82,-99,41,37,23,2,52,-43,35,-47,63,18,-30,37,48,127, 
  /* [24][0][][] */ -22,-30,74,68,54,21,-32,-127,56,11,-25,31,0,13,-37,8, 
  /* [25][0][][] */ -27,21,13,-50,-33,-25,21,-31,-56,53,-36,0,33,127,9,16, 
  /* [26][0][][] */ -66,121,20,44,67,-94,-29,-23,37,56,0,76,16,-1,-120,127, 
  /* [27][0][][] */ -36,-127,-6,-7,-62,82,17,-60,5,-42,64,-19,7,-52,-86,-4, 
  /* [28][0][][] */ -9,23,80,127,49,29,-63,-98,-109,76,89,-35,106,-16,-28,-52, 
  /* [29][0][][] */ -127,98,-26,-34,-35,51,-115,-70,-56,-43,6,-7,14,-59,-124,68, 
  /* [30][0][][] */ 66,88,-30,92,-89,-67,-85,-15,-17,11,-10,-127,104,45,13,69, 
  /* [31][0][][] */ 127,44,-60,0,-38,32,56,50,-88,12,36,18,60,35,-10,-14, 
  /* [32][0][][] */ -57,-36,127,-14,-30,82,95,5,-20,-23,5,30,-1,54,53,60, 
  /* [33][0][][] */ -19,9,-61,-73,-30,29,127,-5,-31,-23,59,-42,50,92,-57,61, 
  /* [34][0][][] */ -96,-38,65,1,2,-84,115,-26,-127,15,49,-16,31,31,-57,-13, 
  /* [35][0][][] */ -7,13,-96,5,-103,92,-27,-21,-58,127,17,103,-57,90,25,51, 
  /* [36][0][][] */ -7,-91,127,-48,-66,5,-39,27,-2,23,-50,78,34,-84,-58,61, 
  /* [37][0][][] */ 27,9,31,-21,104,-16,-28,30,-44,127,-52,-23,-86,-28,59,-41, 
  /* [38][0][][] */ 26,14,66,-59,10,0,-62,63,-42,48,-85,-99,-37,-127,-66,46, 
  /* [39][0][][] */ -67,30,-71,-37,-54,-87,78,-6,-127,-21,13,71,25,6,7,39, 
  /* [40][0][][] */ 127,17,-16,-105,-101,-1,25,-62,-46,-57,-37,-63,6,-9,25,55, 
  /* [41][0][][] */ 105,-68,-62,-67,20,-21,-59,-36,85,-18,15,-45,127,-75,95,-22, 
  /* [42][0][][] */ -35,-121,-31,127,-62,-125,-88,8,-1,-26,14,67,-71,106,-33,15, 
  /* [43][0][][] */ -71,-20,-64,-109,-54,-32,-7,65,47,-127,-43,55,-27,-53,-40,70, 
  /* [44][0][][] */ -70,8,10,-27,-50,-44,73,97,100,-102,92,127,59,12,-32,25, 
  /* [45][0][][] */ 45,87,-82,90,125,-105,-53,-68,127,-69,51,-58,-43,15,-72,48, 
  /* [46][0][][] */ -20,-27,-9,-12,104,-30,21,6,-25,111,-38,-127,44,44,-46,55, 
  /* [47][0][][] */ 48,-22,-3,-4,79,-1,-47,-36,12,127,-36,-5,-1,-127,-78,5, 
  /* [48][0][][] */ 15,25,-5,-127,8,-21,65,-106,-22,16,-14,19,57,61,-25,34, 
  /* [49][0][][] */ -24,97,-118,19,31,-38,58,61,1,-6,57,-102,-8,48,127,-59, 
  /* [50][0][][] */ 32,57,-17,15,-127,15,-86,-51,73,80,21,20,-34,-35,26,26, 
  /* [51][0][][] */ 127,-20,-78,-12,-53,74,-82,-29,21,-8,-28,48,-15,-36,20,38, 
  /* [52][0][][] */ 25,-6,52,92,-29,-86,-127,22,-2,-15,-59,-86,10,-55,33,31, 
  /* [53][0][][] */ 7,70,58,-94,1,127,94,-14,-30,-27,2,-28,59,-95,-15,59, 
  /* [54][0][][] */ 29,127,34,-1,3,-68,-125,61,23,-24,-60,104,88,41,39,46, 
  /* [55][0][][] */ -10,8,62,46,58,-20,64,99,-46,16,-7,-16,127,56,15,-21, 
  /* [56][0][][] */ 127,17,-4,19,-52,70,-42,-67,-39,34,-63,14,-37,90,8,42, 
  /* [57][0][][] */ -16,-9,-44,0,-55,-104,31,-18,-127,10,12,13,37,43,5,17, 
  /* [58][0][][] */ 40,-36,72,27,6,-56,-27,30,23,2,-127,-29,12,-30,-46,34, 
  /* [59][0][][] */ 59,-2,-85,93,19,86,96,-18,-63,-44,23,-103,-127,-74,10,121, 
  /* [60][0][][] */ -10,29,-42,20,-31,-45,-2,-1,-38,-82,63,127,-66,-111,-56,-9, 
  /* [61][0][][] */ -10,34,107,-118,-89,99,-20,127,-38,-79,77,42,112,16,34,94, 
  /* [62][0][][] */ 92,41,-18,-127,-32,-27,13,-47,-28,37,-41,46,30,-14,-82,-71, 
  /* [63][0][][] */ 10,-19,15,11,-46,-79,-79,1,-62,1,-56,-23,127,23,83,-31, 
  /* [64][0][][] */ 47,22,4,70,-74,-52,-41,-86,73,127,11,-20,48,-27,-16,75, 
  /* [65][0][][] */ -19,18,-28,-14,-54,74,23,-24,65,-95,65,-62,49,61,-127,37, 
  /* [66][0][][] */ -85,88,-94,-60,41,-45,-127,1,-31,118,68,-16,-71,-77,26,44, 
  /* [67][0][][] */ 12,-21,-127,-114,75,87,0,-37,-36,5,38,-30,29,45,23,36, 
  /* [68][0][][] */ 86,47,-19,-39,-61,36,0,67,-57,96,127,-33,-2,-39,-121,-21, 
  /* [69][0][][] */ 66,-92,67,-29,33,-127,-40,123,-1,68,70,78,-30,53,-5,-10, 
  /* [70][0][][] */ 60,28,101,33,103,-63,127,17,14,30,-76,51,-89,81,-64,15, 
  /* [71][0][][] */ 6,22,82,-59,-127,-63,16,21,-33,-11,21,-99,-65,-4,4,36, 
  /* [72][0][][] */ -54,-67,40,-92,90,-2,-9,49,-55,35,-127,-31,44,118,-55,84, 
  /* [73][0][][] */ 41,58,19,28,124,-96,-61,0,-51,111,-85,9,-57,-43,127,-16, 
  /* [74][0][][] */ -121,-14,-127,-22,61,-22,-23,54,-71,0,-116,-39,-44,-86,-60,92, 
  /* [75][0][][] */ 93,-25,66,-30,28,7,-127,-23,-14,-83,57,-7,17,-5,2,-15, 
  /* [76][0][][] */ -5,-53,48,98,40,127,66,-33,64,-61,53,46,49,-86,-62,42, 
  /* [77][0][][] */ -14,-45,96,-30,23,-38,-17,-127,5,10,45,75,46,40,33,18, 
  /* [78][0][][] */ -56,-8,2,-40,-13,-32,44,-10,7,-18,26,-83,-100,-67,-127,-32, 
  /* [79][0][][] */ -119,-90,-38,34,127,41,-2,37,16,25,-11,59,-53,-94,-88,-7, 
  /* [80][0][][] */ -1,-108,40,127,-49,-74,-87,57,-45,33,58,15,-76,-14,-9,63, 
  /* [81][0][][] */ 104,48,-30,65,-9,52,39,127,10,-2,124,72,109,5,52,-4, 
  /* [82][0][][] */ -72,-6,56,-17,35,-92,-74,-67,24,56,-49,-13,-50,95,-127,-30, 
  /* [83][0][][] */ 94,10,55,-36,-65,-19,-124,1,21,-127,10,-42,-46,2,49,-44, 
  /* [84][0][][] */ 19,-86,-91,63,127,37,39,67,-85,20,-94,-32,30,-49,-56,23, 
  /* [85][0][][] */ -3,46,15,-43,42,-61,75,-127,115,-58,37,12,60,-96,20,15, 
  /* [86][0][][] */ 121,-22,127,49,13,-65,62,22,-52,-42,-101,-53,24,26,-50,-2, 
  /* [87][0][][] */ 18,29,26,-47,85,-35,-64,30,38,-10,44,-51,-49,-127,14,0, 
  /* [88][0][][] */ -40,-15,-1,4,16,9,-50,-29,-10,22,-66,-127,-36,-41,-27,-16, 
  /* [89][0][][] */ -69,44,-51,-74,42,-8,-127,11,74,58,-33,-19,-11,-47,4,-1, 
  /* [90][0][][] */ 4,10,-35,-43,127,19,-68,66,82,77,14,-36,35,11,-27,-47, 
  /* [91][0][][] */ -31,-41,-22,45,-89,-45,10,55,-59,-56,45,-51,-3,54,22,127, 
  /* [92][0][][] */ -5,104,-32,21,-53,53,-127,33,-24,-2,42,-17,-3,107,111,27, 
  /* [93][0][][] */ 23,119,-66,-67,97,81,-127,9,111,94,63,30,-123,10,-27,73, 
  /* [94][0][][] */ 33,59,70,7,-127,-39,-6,-17,38,-29,16,2,-45,-3,30,-33, 
  /* [95][0][][] */ 12,7,91,27,85,-27,-91,93,9,-11,-127,23,28,-6,120,-89, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0016263358993455768, 0.0020643484313040972, 0.0016545847756788135, 0.0012912126258015633, 0.001214146614074707, 0.0021313359029591084, 0.0013005456421524286, 0.0015086629427969456, 0.0016510214190930128, 0.0020596224348992109, 0.0021846375893801451, 0.0029857533518224955, 0.0014262483455240726, 0.00092919234884902835, 0.0018226931570097804, 0.0025110146962106228, 0.0036746435798704624, 0.002679706085473299, 0.001666360767558217, 0.0013290763599798083, 0.0024201355408877134, 0.0013502754736691713, 0.001255581621080637, 0.0017281939508393407, 0.0020963116548955441, 0.0023257925640791655, 0.001481255516409874, 0.001771817565895617, 0.00098387652542442083, 0.0018906306941062212, 0.00091509375488385558, 0.0021379569079726934, 0.0016228889580816031, 0.0019133058376610279, 0.0012673058081418276, 0.0018752148607745767, 0.001816999982111156, 0.001579945906996727, 0.002176591195166111, 0.0022337075788527727, 0.0017995681846514344, 0.0013763786992058158, 0.0017983658472076058, 0.0018235831521451473, 0.0019190696766600013, 0.0018527938518673182, 0.0015433361986652017, 0.0017033021431416273, 0.0014335121959447861, 0.0013410532847046852, 0.0016922821523621678, 0.0021051142830401659, 0.00091099459677934647, 0.0017747456440702081, 0.0012772023910656571, 0.0020167164038866758, 0.0021293242461979389, 0.0021567721851170063, 0.0018279098439961672, 0.0014993660151958466, 0.0029932274483144283, 0.0015076384879648685, 0.0025058339815586805, 0.00095428468193858862, 0.0011646740604192019, 0.0017028559232130647, 0.0010055952006950974, 0.001098435721360147, 0.0013990944717079401, 0.0014124999288469553, 0.0010087874252349138, 0.0016386595088988543, 0.0010162617545574903, 0.0011519413674250245, 0.0011583323357626796, 0.0013838738668709993, 0.0014331680722534657, 0.0019373890245333314, 0.0021531702950596809, 0.0011290680849924684, 0.00091729877749457955, 0.0017290991963818669, 0.0015012335497885942, 0.0015886262990534306, 0.0011749621480703354, 0.0016834945417940617, 0.0012265391414985061, 0.0015768242301419377, 0.001487310160882771, 0.0023448581341654062, 0.0013264786684885621, 0.0024001637939363718, 0.0010483285877853632, 0.0010555002372711897, 0.0022726685274392366, 0.0018891735235229135, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 8556, 13348, -1204, 391, 470, 6783, 5328, 194, 12947, 3956, -8572, 9868, -17399, 9853, 7277, 6509, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.3675954404752702e-05, 4.991217065253295e-05, 5.3676798415835947e-05, 5.3696345275966451e-05, 7.1419235609937459e-05, 8.7631451606284827e-05, 5.4235977586358786e-05, 4.164673009654507e-05, 6.5297783294226974e-05, 5.668452286045067e-05, 5.0996306526940316e-05, 5.3055817261338234e-05, 6.1380298575386405e-05, 5.263895945972763e-05, 4.4115906348451972e-05, 6.7944100010208786e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -64,14,44,-19,-24,8,-56,-17,-30,9,-10,-46,51,30,27,-35,14,-9,57,-25,9,-33,127,63,52,28,0,16,-38,-93,-74,31,-36,-48,15,59,4,21,-19,40,-20,0,-27,-5,-62,-4,-16,57,-9,-13,-46,-22,-4,-7,13,-46,-73,18,-19,54,46,20,29,-3,-8,-26,-35,9,-82,-59,22,9,-7,13,-45,-29,-46,4,-51,-16,-43,31,77,-83,19,8,16,64,11,-4,1,-15,-26,-34,-55,18, 
  /* [1][0][][] */ 56,-2,4,-28,-49,-5,-31,-9,-14,74,24,-52,-3,7,-43,-23,-21,25,-77,-7,18,-80,47,58,4,-54,2,-53,54,-105,100,-87,50,-3,-16,86,66,50,-43,-56,8,-5,18,-47,-23,80,-127,-24,-79,-45,-15,-19,11,-62,-15,62,44,31,-39,20,2,17,27,-122,-17,14,-55,19,-39,-6,-58,39,-64,-10,30,-70,-20,33,-5,-90,10,0,-45,-65,58,-64,-47,26,-72,-12,-70,29,62,73,-58,59, 
  /* [2][0][][] */ 35,-9,34,-5,3,-84,54,35,-25,-26,-16,-1,-45,-40,-21,-42,-83,-27,-19,49,8,-29,-56,0,34,-81,8,-7,-47,21,-25,105,-66,127,-15,-2,-29,5,-17,-21,-74,77,30,36,-67,-7,5,-32,15,-6,-14,-30,60,-2,-12,38,19,-26,55,12,22,26,-47,26,40,36,-3,3,31,28,-42,-19,50,24,41,18,44,-93,77,82,49,-37,-52,43,-50,72,1,30,23,-13,-30,19,-38,34,3,-9, 
  /* [3][0][][] */ 25,-24,-36,18,49,-17,15,-67,1,58,47,99,45,-10,-51,23,10,-47,23,-10,38,127,54,-37,-1,59,7,-2,87,-37,54,-7,-18,31,-34,-7,17,53,51,25,-108,-29,-10,16,-52,64,12,-4,-9,-33,-8,-25,54,-98,-37,-41,15,118,-38,-3,-26,-5,-19,-1,30,26,-63,-11,-21,6,35,-68,-26,-36,60,-1,11,11,-54,-54,-15,3,-46,-2,-18,-40,45,16,-12,31,41,-1,51,41,-30,75, 
  /* [4][0][][] */ 18,33,-30,19,21,7,-55,-3,-6,40,75,-41,-22,-14,-8,-22,7,-19,-8,17,17,-28,26,51,-78,1,-127,17,-50,-79,24,4,-29,-31,31,51,9,19,27,50,-48,-41,29,-11,-4,-14,-12,31,-41,39,19,21,45,2,-42,-9,27,4,17,-20,64,5,14,8,-60,-1,-61,17,-53,12,-15,57,-6,-50,-51,-45,32,-71,-1,25,-24,61,-75,13,-24,70,36,-66,61,10,19,-1,-17,-34,42,39, 
  /* [5][0][][] */ -83,58,52,-11,71,1,55,12,-21,-3,-35,-6,-1,-38,-31,-34,-30,-33,63,43,-110,-20,-61,37,-62,-19,48,18,26,-58,-14,6,33,127,-11,31,-4,25,52,-32,-27,105,45,-1,2,61,62,21,-5,32,-9,26,21,-19,36,-75,20,-55,-39,-47,57,82,-67,-7,44,-57,-111,-46,-43,-26,-12,-64,-6,20,-11,-65,34,-61,-23,24,118,-33,9,-55,-82,100,-11,-38,-35,3,5,-1,-3,12,25,70, 
  /* [6][0][][] */ -3,4,-53,17,-55,-92,107,111,-74,36,-8,71,-112,-58,32,34,-7,-40,3,37,-37,-18,-63,-73,-45,29,59,38,8,30,61,-82,0,28,6,-97,5,22,29,45,26,26,-97,6,16,-68,-52,7,24,-73,-4,74,51,17,-24,-66,38,7,20,6,-89,41,-127,22,12,13,10,45,62,8,-43,-61,-6,3,71,11,70,-22,77,-33,-6,-69,-85,83,-20,-23,13,-20,-38,35,22,28,-50,10,-13,71, 
  /* [7][0][][] */ 66,63,-62,-41,3,-17,24,-16,-46,65,-32,-53,-13,37,37,9,-36,-35,-52,41,19,124,39,57,-7,28,29,15,74,46,66,6,90,9,-28,41,33,-26,-7,34,-66,-11,42,-88,22,-26,57,-15,59,-64,-105,-37,-57,-10,-11,7,42,43,-127,-7,-16,111,52,-43,-8,-13,-50,2,-37,-13,-89,60,32,106,-13,62,-75,110,-13,-111,-28,-35,90,-109,69,-59,-14,51,-20,95,-71,79,49,-22,-70,23, 
  /* [8][0][][] */ -1,68,-15,12,-32,-41,-94,23,-101,-53,-1,-16,-46,17,41,57,-23,-28,10,-7,33,11,-5,-26,-32,64,-10,47,-32,-8,-20,-5,-38,-24,1,-63,-44,4,39,14,7,-29,31,23,-25,-51,24,-10,-41,-30,60,82,4,3,-40,84,-52,5,17,-7,-22,5,38,66,-46,-63,5,2,-25,-12,45,6,-20,-60,-115,-31,-21,30,-43,-41,-34,-7,-44,-12,23,-30,-1,56,18,37,-64,-36,-46,-127,38,-47, 
  /* [9][0][][] */ -19,14,-104,56,-7,-18,23,37,-8,31,-13,43,-36,-16,13,127,21,1,78,-5,28,14,49,-112,-47,8,-10,-27,39,-38,32,38,-15,-1,5,-81,21,-38,-29,13,-51,12,49,-40,-33,25,33,21,32,103,6,-28,-69,-79,37,3,-2,25,48,-32,-36,39,-32,-61,63,-13,-97,26,-101,-9,67,77,-51,70,-32,-11,-56,-22,-84,-7,51,-24,64,-24,49,39,9,-64,-52,33,10,10,92,10,-63,12, 
  /* [10][0][][] */ 54,10,-9,-3,-37,-16,65,32,7,-11,-15,39,-59,-20,16,0,-63,-9,29,37,6,14,23,3,-19,53,46,8,-54,-38,-19,-25,43,-31,-4,-7,72,-48,76,68,36,-34,-26,14,7,-73,-30,60,41,75,-38,-16,-21,4,-1,38,29,-54,75,37,-42,32,-79,4,5,-32,28,32,21,-3,-41,-1,127,18,37,-76,38,-13,66,-6,-30,17,32,26,-47,1,-5,40,-70,-26,6,40,-3,60,-39,-15, 
  /* [11][0][][] */ -63,-42,69,-87,-30,-16,-33,-21,40,-36,8,47,11,-3,23,-5,-53,26,32,25,-43,24,-72,-98,49,13,-69,46,22,-60,51,-5,8,-21,37,-59,-67,40,-127,6,-36,40,-34,28,-11,-40,-32,-47,25,-52,-66,-33,-3,24,84,-95,-34,-71,33,-40,-74,-52,-43,-94,23,-38,122,68,75,24,67,-28,-16,-6,99,2,98,89,61,-8,7,-13,-20,95,75,-51,-2,12,-65,-65,-13,8,47,25,18,46, 
  /* [12][0][][] */ 40,-45,-21,-53,48,127,-9,50,51,62,16,34,35,55,7,2,-54,25,25,19,106,-17,71,-58,8,48,-73,-75,28,61,-15,1,31,-16,-5,-11,40,9,8,-18,3,18,43,81,-15,88,-4,-12,-39,18,-7,2,2,-34,-9,24,-42,81,-4,23,63,-68,23,-105,0,77,-49,-47,-3,-35,59,48,-36,49,-2,52,-19,27,-92,30,-27,25,112,15,9,102,-11,-68,55,29,-57,75,51,-4,-21,-42, 
  /* [13][0][][] */ -31,9,-17,-36,-28,-2,-7,3,1,-21,-14,-49,90,-79,-52,-82,8,1,-92,-25,-79,-29,35,60,-3,18,92,-4,-5,-26,42,65,23,-14,-127,107,-30,-24,7,-41,111,22,1,24,9,-67,26,-42,70,17,-55,25,29,-20,-16,57,54,-46,-61,-13,42,17,24,-81,-17,58,-28,10,-48,-47,-69,2,-74,11,-40,-67,-93,23,21,69,-34,36,45,-93,45,68,0,-6,-39,-18,6,37,-90,12,-34,-23, 
  /* [14][0][][] */ -6,14,-97,-18,95,92,-127,-24,6,-54,79,-28,36,-10,-29,-80,-59,52,22,101,37,-3,21,-10,30,41,-63,65,2,7,-28,-4,72,-16,-17,26,-4,42,63,6,66,-6,54,-32,-59,-16,55,-40,1,-10,-24,-30,35,20,-27,43,-1,64,-112,-22,-37,-97,-12,-115,0,-38,-20,16,-99,41,6,47,-16,-34,-14,-27,36,6,-79,-46,27,15,16,-43,21,39,-33,4,-17,80,74,38,35,-57,-50,-56, 
  /* [15][0][][] */ -73,-54,28,-12,25,-66,-19,-62,1,38,12,96,-7,10,44,98,-68,-27,16,-52,30,-47,-30,-68,15,-28,74,-52,-57,-76,-81,27,-5,36,32,-90,-1,-47,57,-43,-4,3,25,-12,42,19,39,105,-18,25,20,-35,-29,25,-1,-16,-86,-18,70,24,-29,18,-98,18,-69,-28,-8,-1,92,-68,48,-29,80,-48,-19,-34,12,35,50,-6,-32,73,42,28,-11,-24,-127,8,-22,-36,-66,11,-9,-15,-27,58, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022812280803918839, 0.0021212671417742968, 0.0022812639363110065, 0.0022820946760475636, 0.0030353174079209566, 0.0037243366241455078, 0.002305028960108757, 0.0017699860036373138, 0.0027751557063311338, 0.0024090921506285667, 0.0021673429291695356, 0.0022548721171915531, 0.0026086627040058374, 0.0022371558006852865, 0.001874926034361124, 0.0028876240830868483, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -699, 502, -5416, -9100, -1027, -941, -4877, -5740, -5552, 596, 5378, -787, -2585, 6974, 7436, -1006, 10020, 2364, -5433, -1569, -4287, 2068, -136, -518, 549, -5725, -1826, -5377, 4487, -6471, 6647, 673, 10216, 1437, 761, 193, -2426, -497, -2062, 3847, 1760, 1800, 1857, -3409, 12941, 1846, 4309, 18163, 1925, -2826, 12129, -3311, 637, 3517, 1935, 11368, 1305, 1193, 14759, 5465, 6126, 12191, 1924, -7444, 1004, -481, -1080, 9350, 216, -2593, 3255, -1204, 11010, -4535, -535, 12867, -1339, -3515, 17090, 2204, 176, 10142, 2566, 629, 14363, 255, -7758, -2656, 3108, -11566, 9306, -7, -4909, -1917, -2173, -5071, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00029566310695372522, 0.00017972574278246611, 0.00011486531730042771, 9.8597862233873457e-05, 0.00022176907805260271, 0.00017909731832332909, 0.00026772613637149334, 0.0001330338855041191, 0.00016836209397297353, 0.00021971068053971976, 0.00013260626292321831, 0.00051127123879268765, 0.00034284792491234839, 0.00016418760060332716, 0.00010693795775296167, 0.00018803424609359354, 0.00011090494081145152, 0.00015182940114755183, 0.0001162972766906023, 0.00011464656563475728, 0.00013319375284481794, 0.00033597557921893895, 0.00024806620785966516, 0.00019402845646254718, 0.00057451694738119841, 0.00011021355021512136, 0.00024337583454325795, 0.0001079884750652127, 0.00016731976938899606, 0.00011360463395249099, 0.00027148346998728812, 0.00020233704708516598, 0.00015357704251073301, 0.00017367783584631979, 0.00017792719881981611, 0.00029652181547135115, 0.00015962844190653414, 0.00068020343314856291, 0.00017384783132001758, 7.4781251896638423e-05, 0.00012845302990172058, 0.00013912018039263785, 0.00015819768304936588, 0.00014339908375404775, 0.00011225350317545235, 0.00014671706594526768, 0.00011873032781295478, 7.4703115387819707e-05, 0.00016441667685285211, 0.00014276635192800313, 0.00013308892084751278, 0.00010897139145527035, 0.00016791057714726776, 0.00014037721848580986, 0.0001488592242822051, 0.00015523619367741048, 0.00019116769544780254, 0.00021362875122576952, 0.00013835499703418463, 0.00012344161223154515, 0.00014454162737820297, 0.00013618136290460825, 0.00018918726709671319, 9.4136761617846787e-05, 0.00011595755495363846, 0.00020065433636773378, 0.00059553940081968904, 0.00010565752745606005, 0.0002296387538081035, 0.00019787800556514412, 0.00013877250603400171, 0.00018703192472457886, 0.00020707451039925218, 0.00015571153198834509, 0.00032232858939096332, 9.445563773624599e-05, 9.9286327895242721e-05, 0.00018315052147954702, 0.00010355329141020775, 0.0001912061998154968, 0.0001516365009592846, 9.7644013294484466e-05, 0.0003009193460457027, 0.00016710559430066496, 8.7640939455013722e-05, 0.00026676393463276327, 0.00011207588977413252, 0.00027570370002649724, 0.00018249657296109945, 7.9023302532732487e-05, 0.00013556089834310114, 0.00021529167133849114, 0.00020101298287045211, 0.00041254589450545609, 0.00015354217612184584, 0.00023666110064368695, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 34,102,30,71,-54,29,50,79,114,-73,-22,-22,8,-30,-18,-94,-127,2,54,27,56,43,60,121,-8,32,-50,4,-33,13,-3,-31,-82,9,-22,88,-29,55,49,28,54,-66,20,-11,-84,-21,40,-34,-78,-24,-68,49,-8,39,-11,14,-96,-72,-73,-127,-20,-8,-103,84,-68,71,81,-49,-29,64,45,57,-86,11,27,-9,56,-27,-97,18,-46,-89,31,5,-70,-34,40,39,-127,73,13,43,45,3,61,23, -34,-46,0,72,-26,127,-2,-12,109,-15,-48,-28,-11,-36,-127,127,-56,98,49,127,127,-6,127,96,24,8,4,49,-8,127,-31,-117,36,127,1,13,71,127,-27,-67,127,23,110,45,-36,-97,127,-108,-11,-89,-127,14,20,65,-40,-127,-13,8,-89,-45,-71,-25,41,127,-27,125,127,-44,42,127,127,-23,-81,97,-40,-101,82,-55,-79,127,-58,31,127,-39,7,-27,127,59,84,127,-69,4,127,-27,127,65, 47,-127,22,41,-33,56,-4,99,89,43,-2,12,-5,23,-34,-60,-29,-19,50,37,49,9,49,118,0,-127,42,-4,-33,48,-35,-69,-42,-58,-51,94,22,-13,11,-18,25,52,-27,74,-69,26,26,-95,10,-36,-18,11,-23,-61,-29,26,19,-92,-66,-90,-62,-9,-93,-4,44,7,25,-51,-47,18,11,65,-2,-39,-13,-13,26,9,-127,-6,44,-127,7,0,-43,-30,33,28,-86,79,3,34,57,11,3,3, 
  /* [0][1][][] */ 62,15,47,127,3,-57,127,72,-11,-127,-127,127,3,-127,-9,-15,-36,-96,127,43,-89,-11,-117,-87,-36,85,-127,127,-108,63,110,32,65,34,13,101,-127,26,7,-66,61,-127,43,33,-127,-43,-20,-42,-127,10,-50,3,79,-37,64,-47,-127,14,-62,30,-127,-127,-12,40,-127,-15,83,-127,-58,80,-48,-126,-42,76,127,-67,120,121,-64,-40,127,-44,-49,123,-115,-31,29,127,-26,13,-63,-3,14,-30,54,-3, -127,-5,-21,122,-50,-125,-89,-127,127,-2,-38,-17,-26,-42,-13,103,-89,-127,105,95,10,-127,-90,-22,-90,113,26,101,-78,-23,-127,53,-83,33,127,26,46,43,127,-126,-57,-2,21,-15,7,-84,-124,-127,-15,-76,-123,127,43,43,16,-100,62,9,62,10,-115,11,-112,60,-28,-127,84,99,2,62,-102,-49,0,63,-91,-119,127,127,70,-92,-116,75,-86,66,46,-56,97,111,104,123,-127,-127,-89,-20,28,127, 61,-26,124,73,10,-9,10,83,-42,102,-25,101,28,-3,-75,31,-1,-62,75,21,-85,-13,-64,-127,-27,26,119,-10,127,79,-13,-127,70,-111,-44,127,-105,-24,-9,-40,-16,68,-28,127,-24,-19,-41,-99,92,11,-1,-36,43,-127,-127,3,89,11,-127,36,-49,-89,25,7,115,-61,29,-12,-70,27,-42,-60,-127,-127,14,-42,-8,30,-119,-8,-104,-79,-50,127,-127,12,4,-54,-36,44,16,46,12,127,-6,-24, 
  /* [0][2][][] */ 23,-117,75,16,24,43,58,106,-15,-46,-28,24,6,-4,13,-42,40,43,-8,30,5,56,-11,-22,1,80,-28,-1,-57,-16,-20,44,-59,-36,-32,3,78,-39,39,-56,-3,-10,-27,-15,3,127,-55,5,-36,87,8,9,46,-6,-42,-41,-35,-2,19,2,100,-66,90,33,-34,47,-28,-102,-9,-22,12,50,-11,29,17,5,30,0,-101,-55,107,-79,-37,-25,-103,51,-9,45,-95,35,-42,22,24,19,5,-9, -59,-3,127,55,127,95,4,59,-105,30,-61,-69,127,29,-88,-20,-5,65,-63,-62,31,24,56,68,127,3,-2,49,-59,70,-36,47,-127,3,-3,-20,85,54,124,-127,-25,-49,-127,-10,-33,78,-81,-119,11,37,-76,116,127,-35,-48,-25,-23,127,19,38,125,-38,127,89,-37,9,-20,7,127,-38,5,127,-58,53,-42,-127,13,-58,-33,-68,9,-36,-21,-92,-13,127,52,69,89,56,-5,53,-45,-7,-23,-46, 46,63,72,6,8,-9,-8,85,45,53,28,26,-17,-25,25,-13,-5,7,13,3,7,18,-10,-109,-4,32,48,8,-27,-47,-49,-71,-62,-39,-50,-41,81,-59,-9,-8,5,-54,-10,62,-82,74,-54,-44,3,127,-14,-33,-22,-45,-14,-32,-19,11,-23,33,65,-54,30,-45,31,6,-8,25,4,25,17,111,-10,25,-8,-13,-43,-11,-123,-22,-15,-110,-40,33,-111,28,-13,36,-78,83,20,23,56,6,-3,4, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012565681710839272, 0.0076383436098694801, 0.004881775937974453, 0.0041904090903699398, 0.0094251856207847595, 0.0076116360723972321, 0.011378360912203789, 0.0056539401412010193, 0.0071553890593349934, 0.0093377036973834038, 0.0056357663124799728, 0.021729027852416039, 0.014571036212146282, 0.0069779730401933193, 0.004544863011687994, 0.0079914554953575134, 0.0047134598717093468, 0.0064527494832873344, 0.004942634142935276, 0.004872479010373354, 0.0056607341393828392, 0.014278961345553398, 0.010542813688516617, 0.0082462094724178314, 0.02441697008907795, 0.0046840757131576538, 0.010343472473323345, 0.0045895101502537727, 0.0071110902354121208, 0.0048281969502568245, 0.011538047343492508, 0.0085993241518735886, 0.0065270243212580681, 0.0073813078925013542, 0.007561905775219202, 0.012602177448570728, 0.0067842085845768452, 0.028908645734190941, 0.0073885326273739338, 0.0031782032456248999, 0.0054592536762356758, 0.0059126075357198715, 0.006723401602357626, 0.006094460841268301, 0.0047707739286124706, 0.0062354751862585545, 0.0050460388883948326, 0.0031748823821544647, 0.0069877086207270622, 0.0060675698332488537, 0.0056562791578471661, 0.0046312841586768627, 0.0071361996233463287, 0.0059660314582288265, 0.0063265166245400906, 0.0065975380130112171, 0.0081246271729469299, 0.0090792216360569, 0.0058800871483981609, 0.0052462681196630001, 0.0061430190689861774, 0.0057877078652381897, 0.0080404588952660561, 0.0040008123032748699, 0.0049281958490610123, 0.0085278088226914406, 0.025310425087809563, 0.004490444902330637, 0.0097596468403935432, 0.0084098149091005325, 0.0058978311717510223, 0.0079488568007946014, 0.0088006667792797089, 0.0066177402622997761, 0.01369896437972784, 0.0040143644437193871, 0.0042196689173579216, 0.0077838972210884094, 0.0044010146521031857, 0.0081262635067105293, 0.0064445510506629944, 0.0041498704813420773, 0.012789071537554264, 0.0071019874885678291, 0.0037247398868203163, 0.011337466537952423, 0.0047632250934839249, 0.011717407032847404, 0.007756104227155447, 0.0033584902994334698, 0.0057613379321992397, 0.0091498959809541702, 0.0085430517792701721, 0.017533199861645699, 0.0065255425870418549, 0.01005809661000967, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 3651, 2496, 1071, -460, 4783, 3845, 3258, 2251, -400, 15377, 408, -3439, 1358, 2793, 179, -46, 2459, 3448, -629, -29, 2812, 5814, 14278, -877, -4029, -335, 11162, 339, 1837, 1284, 6241, -1187, 8142, 942, 4306, -3100, 1382, -4456, -406, 437, 732, 633, 597, -440, 493, 2554, 3553, 2659, 3840, 1193, 4729, 2386, -1912, 2591, 2208, 942, 1609, 2459, 3370, 471, -987, 4458, 2457, 2958, 1989, 8887, -5496, 1571, 2844, -575, 4192, 4505, 2942, 2350, 2398, 1519, -673, 1901, 2157, 1506, 1107, 2484, 8734, 215, 2410, 3737, 439, -2516, 10253, 246, 680, -651, 6594, 2217, -275, -592, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00019015712314285338, 0.00014008695143274963, 0.0002180729788960889, 0.00031600162037648261, 0.00017126750026363879, 0.00018026703037321568, 0.00022283577709458768, 0.00017391330038663, 0.00019312294898554683, 6.4395047957077622e-05, 0.00032110553001984954, 0.00017507180746179074, 0.00018215998716186732, 0.00020431495795492083, 0.00026326192892156541, 0.00029788669780828059, 0.00022269219334702939, 0.00018538809672463685, 0.00019322584557812661, 0.00023984734434634447, 0.00020218269492033869, 0.0001519110519438982, 7.0341942773666233e-05, 0.00020025487174279988, 0.00015442044241353869, 0.00022808692301623523, 8.5835403297096491e-05, 0.00014003142132423818, 0.00020351813873276114, 0.00024839217076078057, 0.00014770979760214686, 0.00021502333402168006, 0.00010779777221614495, 0.00034621282247826457, 0.00016025143850129098, 0.00021384826686698943, 0.0001840199256548658, 0.00015305569104384631, 0.00032925585401244462, 0.00041415489977225661, 0.00038970581954345107, 0.00036338073550723493, 0.00036259682383388281, 0.00024206034140661359, 0.00041874623275361955, 0.00018713106692302972, 0.00018305212142877281, 0.00019564562535379082, 0.00015091276145540178, 0.00035567596205510199, 0.00015558623999822885, 0.0002286433445988223, 0.00023921683896332979, 0.00019464154320303351, 0.00015441216237377375, 0.00026100617833435535, 0.00023493744083680212, 0.00016180239617824554, 0.00021150318207219243, 0.00035469833528622985, 0.0002520544221624732, 0.00016658299136906862, 0.0002613272808957845, 0.00018133975390810519, 0.00027320053777657449, 9.0303183242212981e-05, 0.00015063986938912421, 0.00026152023929171264, 0.00016917020548135042, 0.00032327708322554827, 0.00015087387873791158, 0.0001076519547495991, 0.00021328222646843642, 0.00019367945787962526, 0.0002246994263259694, 0.00015001861902419478, 0.00022708172036800534, 0.0002124616876244545, 0.00019316330144647509, 0.00025387879577465355, 0.00032058125361800194, 0.00018280911899637431, 0.00010308743367204443, 0.00023449074069503695, 0.00015480566071346402, 0.00018865088350139558, 0.00016996100021060556, 0.00019161170348525047, 9.7001939138863236e-05, 0.00020425715774763376, 0.00029604966402985156, 0.00037036891444586217, 0.00011367183469701558, 0.0001686486357357353, 0.00029437203193083405, 0.00016546416736673564, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -58,-5,17,-13,-11,-104,-97,-9,69,-44,31,-6,99,-79,-22,-127, 
  /* [1][0][][] */ -64,88,-76,-127,-101,43,8,1,-90,-19,91,-36,41,111,103,82, 
  /* [2][0][][] */ -55,-17,-53,2,-6,-39,47,-10,-127,105,63,4,23,89,-76,107, 
  /* [3][0][][] */ -61,-69,33,-14,-51,-22,-51,-96,14,30,11,-47,-58,-31,-127,-53, 
  /* [4][0][][] */ 65,-25,-89,44,-99,-12,-57,48,12,-4,93,127,-82,28,-12,-115, 
  /* [5][0][][] */ -35,36,-65,10,35,-35,-14,-19,83,-25,-11,-72,29,-127,-59,-66, 
  /* [6][0][][] */ -36,-65,0,67,-62,63,64,5,6,-46,121,-14,18,-20,-127,14, 
  /* [7][0][][] */ -60,110,127,-123,107,122,48,-45,16,96,-79,22,3,50,-4,45, 
  /* [8][0][][] */ -50,4,100,14,28,14,100,74,-51,-38,-89,-127,44,90,-80,-72, 
  /* [9][0][][] */ 9,55,87,32,-127,-47,-77,-45,53,76,116,-60,-15,-98,56,-50, 
  /* [10][0][][] */ 5,-56,3,-62,-127,1,28,29,-52,-40,-6,14,3,60,-90,26, 
  /* [11][0][][] */ 95,-21,-10,56,-89,-30,64,2,127,99,-60,19,-11,-112,-48,84, 
  /* [12][0][][] */ -17,-89,121,13,126,-29,54,65,126,13,63,3,-87,-30,-127,-25, 
  /* [13][0][][] */ 29,-37,8,79,-16,16,127,55,-78,14,-16,-3,-32,75,112,-127, 
  /* [14][0][][] */ 127,-127,100,-22,39,12,63,47,113,29,26,56,56,-74,26,-55, 
  /* [15][0][][] */ -33,127,32,-13,25,94,-94,63,-47,31,-75,-13,-64,114,-47,-39, 
  /* [16][0][][] */ -16,106,107,-82,9,102,-10,-20,-43,4,-15,31,115,-18,65,127, 
  /* [17][0][][] */ 52,113,114,-78,40,-53,-9,-48,-90,127,-61,21,-26,-37,114,-113, 
  /* [18][0][][] */ -59,3,3,-47,127,108,-37,-41,58,88,108,56,-6,82,-9,43, 
  /* [19][0][][] */ 100,119,66,52,32,-25,-29,-27,9,102,38,127,86,43,-61,41, 
  /* [20][0][][] */ 104,13,20,55,-48,1,-47,23,12,-30,-127,-52,66,-75,29,-24, 
  /* [21][0][][] */ -34,-72,-9,67,-41,-26,-127,38,11,-17,4,-4,-1,4,-63,16, 
  /* [22][0][][] */ 9,15,-94,-66,127,30,8,75,62,93,9,-3,0,-7,-42,9, 
  /* [23][0][][] */ -72,14,-26,6,29,59,100,85,-42,127,-24,-36,14,41,-76,-23, 
  /* [24][0][][] */ -8,-75,67,47,108,39,68,-69,127,-51,86,55,-93,28,7,12, 
  /* [25][0][][] */ 49,-31,76,25,-22,48,16,12,125,-76,-41,-12,41,-57,127,49, 
  /* [26][0][][] */ 109,60,65,76,107,-1,-84,38,-18,127,3,118,14,13,29,-90, 
  /* [27][0][][] */ -40,35,-127,4,-29,22,34,-45,33,-83,126,61,66,-11,107,119, 
  /* [28][0][][] */ -20,51,-67,-127,40,-78,11,-42,-96,61,-46,50,-55,42,-29,37, 
  /* [29][0][][] */ 97,61,-79,15,43,29,3,-48,43,-1,17,99,-127,55,-51,70, 
  /* [30][0][][] */ -63,40,-108,-79,35,-40,47,-27,-15,10,-33,1,-21,38,14,127, 
  /* [31][0][][] */ 67,-127,54,3,117,-120,-34,30,-55,-3,3,-25,-31,33,15,126, 
  /* [32][0][][] */ -107,36,15,106,-84,55,62,107,43,-127,-21,-100,36,50,104,-5, 
  /* [33][0][][] */ -61,-9,46,80,-13,48,-32,9,-21,-58,36,2,-8,10,31,127, 
  /* [34][0][][] */ -9,49,-100,-52,99,1,-50,103,-32,34,-30,-41,-29,-11,-71,127, 
  /* [35][0][][] */ 36,-11,29,-25,-7,27,-37,-15,-14,-127,-30,24,-20,15,40,-29, 
  /* [36][0][][] */ -34,12,-119,15,75,127,4,100,-11,44,65,22,7,23,-120,53, 
  /* [37][0][][] */ 51,5,84,-35,19,-127,9,-12,-61,86,-108,-51,29,-14,112,12, 
  /* [38][0][][] */ -63,98,50,-62,8,54,47,-127,-7,-1,-69,31,-66,-97,-78,59, 
  /* [39][0][][] */ 75,34,-127,-97,-32,6,37,-42,6,-17,26,-36,33,29,-78,-36, 
  /* [40][0][][] */ -29,2,-72,-92,-29,-89,70,-127,-12,-13,21,-2,35,95,17,70, 
  /* [41][0][][] */ -73,-114,-7,127,39,35,-53,-32,-26,-50,84,-97,-46,10,-21,63, 
  /* [42][0][][] */ -24,37,18,-127,5,37,-39,-57,80,-51,-65,13,119,-37,0,42, 
  /* [43][0][][] */ -5,63,-14,15,127,-2,31,14,-28,62,4,-81,-62,-1,-38,-23, 
  /* [44][0][][] */ 103,-35,-3,47,0,45,-3,34,39,-30,25,-12,127,-6,-26,-24, 
  /* [45][0][][] */ 26,-127,-30,52,-76,-87,-8,8,61,-19,-15,55,-118,95,40,-69, 
  /* [46][0][][] */ 32,-45,28,92,-29,-47,-127,47,13,-28,35,-26,60,52,110,88, 
  /* [47][0][][] */ -16,-92,-16,77,-4,-38,42,16,37,-104,-127,-14,50,-63,-39,-10, 
  /* [48][0][][] */ -62,81,-47,-27,21,70,5,-99,87,-12,46,-79,59,-127,-95,3, 
  /* [49][0][][] */ -41,3,30,-41,1,10,98,127,-44,-20,-5,-48,-15,11,-25,24, 
  /* [50][0][][] */ 64,29,-49,10,10,-127,-51,-17,-47,20,-37,9,2,-84,-67,-25, 
  /* [51][0][][] */ -52,63,-42,69,-26,27,-27,-113,-63,-78,-5,-53,-8,18,-39,127, 
  /* [52][0][][] */ -127,-8,5,-11,3,57,63,18,-8,-83,-23,-44,-73,-35,-85,9, 
  /* [53][0][][] */ -37,-41,-85,-127,-27,0,57,37,24,-56,-39,23,-67,38,69,76, 
  /* [54][0][][] */ -28,-56,-32,-1,-61,114,124,30,-18,-119,127,41,-52,-22,-104,82, 
  /* [55][0][][] */ 10,-7,-18,34,50,-54,45,90,-45,-40,-127,-55,62,-30,-28,30, 
  /* [56][0][][] */ 83,-70,-60,12,-127,39,-75,12,-19,24,-17,22,103,-18,28,13, 
  /* [57][0][][] */ -46,-8,14,-6,127,49,59,59,-4,33,-7,21,-61,79,-71,-27, 
  /* [58][0][][] */ 43,8,-6,-29,25,-12,-73,-57,53,-127,-84,-9,-28,-72,-36,35, 
  /* [59][0][][] */ -22,2,-7,-18,-15,26,-124,-67,47,127,-62,24,-30,20,8,-17, 
  /* [60][0][][] */ 39,-42,9,-51,-97,-104,102,-20,23,70,-50,46,-65,-127,27,33, 
  /* [61][0][][] */ 29,18,-60,-9,-17,-53,-127,-72,0,15,15,101,63,-66,77,29, 
  /* [62][0][][] */ 42,-21,58,14,-41,58,31,66,-31,127,10,50,19,51,110,73, 
  /* [63][0][][] */ 0,-125,-5,-19,-52,46,78,-50,-12,-27,-9,28,-78,127,58,69, 
  /* [64][0][][] */ 2,-11,-127,-23,25,81,4,-10,-34,-80,65,54,120,39,-76,81, 
  /* [65][0][][] */ -35,-39,36,80,90,-7,127,106,1,-41,-103,-93,48,123,-101,4, 
  /* [66][0][][] */ -3,-57,-54,-88,-33,-112,127,-35,8,-28,41,78,-113,-66,-68,66, 
  /* [67][0][][] */ -33,-81,-84,23,-76,127,-18,-70,-59,-25,-16,-97,14,-19,-82,35, 
  /* [68][0][][] */ 94,92,-11,-24,-88,69,-58,-60,-100,-127,-41,-3,43,4,40,-69, 
  /* [69][0][][] */ 3,-14,28,-16,-2,-72,-39,13,34,127,-19,-4,-7,22,78,-2, 
  /* [70][0][][] */ 78,10,-29,111,-127,46,-30,-106,117,110,19,34,55,-75,-16,11, 
  /* [71][0][][] */ 114,-127,71,101,-113,-33,90,-20,93,-80,-46,33,95,-69,11,-22, 
  /* [72][0][][] */ 19,-75,46,98,48,10,-127,74,57,-37,79,21,1,-53,-41,76, 
  /* [73][0][][] */ 30,22,9,-127,118,-18,-15,49,-21,101,44,37,-14,-98,45,-38, 
  /* [74][0][][] */ 59,-10,12,15,-127,-40,55,2,-10,-47,16,-30,-6,-69,9,25, 
  /* [75][0][][] */ 87,127,-102,20,-16,69,-84,-44,-13,-43,78,109,-81,50,55,114, 
  /* [76][0][][] */ -89,-41,-17,-27,-53,37,127,3,-48,16,124,53,-61,-108,-32,110, 
  /* [77][0][][] */ -106,121,-31,-5,-45,-99,81,22,111,-115,-21,101,-61,127,32,40, 
  /* [78][0][][] */ 78,12,-47,67,-61,16,-127,24,-20,2,-78,-24,61,-111,-9,41, 
  /* [79][0][][] */ -33,-59,76,100,-1,-8,-14,-35,11,-17,48,38,-37,127,-5,86, 
  /* [80][0][][] */ 83,85,48,-105,9,72,122,-16,-14,68,-20,-65,127,-46,-44,20, 
  /* [81][0][][] */ 66,-47,-8,-100,91,60,4,127,75,79,12,-13,-29,47,-83,-54, 
  /* [82][0][][] */ 50,106,3,-23,83,-64,34,60,-9,127,-32,-8,0,-83,35,-74, 
  /* [83][0][][] */ -13,41,48,15,57,33,127,73,7,65,-32,-43,-62,40,-61,-89, 
  /* [84][0][][] */ -4,-84,-48,52,39,-25,-29,73,-101,100,-32,-10,-127,92,-24,-79, 
  /* [85][0][][] */ -90,43,14,-26,2,5,-5,-68,-57,41,-25,-127,-82,-82,-76,31, 
  /* [86][0][][] */ -23,10,115,127,43,-34,59,12,23,37,-54,-20,13,75,-89,-76, 
  /* [87][0][][] */ 2,84,92,-13,-127,-60,46,31,38,-31,19,63,-60,44,13,-20, 
  /* [88][0][][] */ -55,5,-90,-2,60,16,5,59,-50,-51,-127,-117,83,-2,-21,16, 
  /* [89][0][][] */ 28,25,-25,-121,22,-35,-47,31,127,-33,39,-75,6,-57,62,-87, 
  /* [90][0][][] */ 8,75,46,0,-62,-28,21,115,-33,-79,-35,127,106,-3,-68,100, 
  /* [91][0][][] */ -59,28,20,72,46,43,-8,-127,-27,15,-7,29,-120,-105,-1,-3, 
  /* [92][0][][] */ -6,78,22,-31,-116,-30,-127,50,-40,89,58,-13,25,-61,51,-20, 
  /* [93][0][][] */ 88,67,86,45,-123,-66,3,20,44,-32,-15,-91,5,-127,25,15, 
  /* [94][0][][] */ -30,-127,16,-66,0,56,-7,16,53,-28,18,62,22,71,-24,55, 
  /* [95][0][][] */ -35,-67,-28,-7,108,105,-42,95,69,40,-92,88,-29,127,-87,19, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0017977970419451594, 0.0013244200963526964, 0.0020617211703211069, 0.0029875652398914099, 0.0016192094190046191, 0.0017042934196069837, 0.0021067499183118343, 0.0016442235792055726, 0.001825836836360395, 0.00060880830278620124, 0.003035818925127387, 0.0016551763983443379, 0.0017221899470314384, 0.0019316490506753325, 0.0024889498017728329, 0.0028163017705082893, 0.0021053925156593323, 0.0017527093878015876, 0.0018268096027895808, 0.0022675818763673306, 0.0019114901078864932, 0.0014362083747982979, 0.00066503183916211128, 0.0018932638922706246, 0.0014599327696487308, 0.002156395697966218, 0.00081151124322786927, 0.0013238950632512569, 0.0019241158151999116, 0.0023483671247959137, 0.0013964885147288442, 0.0020328890532255173, 0.0010191494366154075, 0.0032731899991631508, 0.0015150606632232666, 0.0020217795390635729, 0.001739774364978075, 0.0014470301102846861, 0.0031128742266446352, 0.0039155329577624798, 0.003684384748339653, 0.0034355001989752054, 0.0034280887339264154, 0.0022885042708367109, 0.0039589405059814453, 0.0017691879766061902, 0.0017306244699284434, 0.0018496868433430791, 0.0014267702354118228, 0.0033626570366322994, 0.0014709546230733395, 0.0021616562735289335, 0.0022616209462285042, 0.0018401939887553453, 0.0014598545385524631, 0.0024676232133060694, 0.0022211624309420586, 0.0015297237550839782, 0.0019996084738522768, 0.0033534143585711718, 0.0023829909041523933, 0.0015749208396300673, 0.0024706590920686722, 0.0017144352896139026, 0.0025829121004790068, 0.00085375079652294517, 0.0014241902390494943, 0.0024724833201617002, 0.0015993810957297683, 0.003056349465623498, 0.0014264025958254933, 0.0010177708463743329, 0.0020164281595498323, 0.0018310982268303633, 0.0021243693772703409, 0.0014183167368173599, 0.002146892249584198, 0.0020086704753339291, 0.0018262183293700218, 0.0024002392310649157, 0.0030308621935546398, 0.0017283271299675107, 0.00097461661789566278, 0.002216939115896821, 0.0014635748229920864, 0.0017835566541180015, 0.0016068575205281377, 0.0018115490674972534, 0.00091708271065726876, 0.0019311027135699987, 0.0027989340014755726, 0.0035015682224184275, 0.0010746844345703721, 0.001594449975527823, 0.0027830731123685837, 0.0015643432270735502, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -35005, -16101, 11469, -16779, 19046, -8972, 29052, -15785, 2444, -7482, 15535, 16495, -8589, -15762, -2406, 13889, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 4.438002360984683e-05, 3.5521949030226097e-05, 6.4210864366032183e-05, 4.5801964006386697e-05, 8.8334985775873065e-05, 0.00010733051021816209, 5.8518329751677811e-05, 4.775518027599901e-05, 0.00012209860142320395, 0.00011749287659768015, 7.9441189882345498e-05, 4.8198049626080319e-05, 6.6950000473298132e-05, 9.4144081231206656e-05, 5.6456687161698937e-05, 4.8355839680880308e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 40,36,22,45,-15,-84,-25,-19,-35,-62,49,-5,67,-80,34,25,-87,-9,56,1,76,1,-87,-21,-30,60,116,61,33,61,45,-48,25,-1,58,-12,15,17,-29,1,127,19,-9,8,-19,-3,19,-33,56,-49,113,33,-63,-8,80,29,5,-17,-4,25,14,91,-60,-6,28,30,72,19,32,-18,65,47,8,35,-7,53,62,-20,52,46,-21,40,54,24,-67,2,-6,63,34,1,-103,-35,32,-6,98,89, 
  /* [1][0][][] */ 26,53,-21,30,4,-64,75,-97,-21,-39,-47,-67,-6,-52,-39,-72,-2,-15,23,1,-25,-64,97,-53,-28,32,-16,43,-22,-21,-59,2,-36,14,59,-5,-29,41,-82,103,50,4,-11,-10,37,-47,28,59,-75,-25,96,-74,-27,43,85,69,16,43,-94,-1,-37,63,2,14,64,64,127,8,-47,-119,48,21,54,85,-38,39,-52,-10,106,-21,62,-46,64,-76,-31,-52,-41,10,18,-31,10,-20,66,-68,-38,38, 
  /* [2][0][][] */ 4,-47,-1,-39,49,59,-41,39,-54,25,-16,0,30,-4,41,42,11,-37,-127,-9,-4,-26,-3,59,9,-25,-46,25,-48,-7,-1,67,-27,-18,-26,9,-39,25,-7,-29,67,19,29,30,19,38,-18,-30,-73,13,-19,-12,-36,41,-15,-65,19,1,54,1,-19,-38,-32,23,8,-38,-34,19,13,5,-39,-62,-5,26,37,54,-54,-22,-15,-33,31,52,35,-13,6,-53,4,-47,-37,-53,4,51,-21,5,78,-20, 
  /* [3][0][][] */ 70,-59,-14,-99,-1,-41,102,-25,36,127,-75,-6,38,-60,-32,51,75,43,0,16,-49,0,12,-9,-60,81,38,-19,-29,-16,-69,58,39,-18,65,-13,-41,-74,-28,56,39,11,-32,67,50,-47,10,23,81,-40,55,-6,97,46,32,-56,0,-13,-8,-41,15,72,106,-18,-23,6,108,-46,-14,2,-64,18,18,-75,-2,-85,35,-35,114,33,-16,-89,-16,-40,-31,-72,76,90,-35,48,-77,-17,8,-115,-32,61, 
  /* [4][0][][] */ -35,71,41,16,-28,17,-24,-2,34,-41,17,-26,1,55,11,38,-3,-47,-50,-59,20,-56,-61,45,-35,-28,-29,27,-47,127,-22,-7,3,-59,-12,-33,67,46,-34,-7,5,4,1,-58,-37,3,44,-38,19,-15,-66,-23,-85,51,74,6,13,55,-4,9,-55,-71,-12,11,48,22,-71,1,-10,-10,6,-89,10,45,33,32,-53,38,-77,33,32,41,21,-80,43,-56,-40,-70,-40,-20,-37,-11,4,23,35,-12, 
  /* [5][0][][] */ -18,-25,43,-45,-28,-9,-11,16,58,6,-44,18,-18,-11,51,-14,-25,-4,-95,-33,-18,27,-15,55,24,-39,85,-13,-15,47,25,95,-22,-96,-12,3,-44,-22,-18,-13,-64,-12,5,1,10,11,-67,12,-66,29,51,-48,8,-86,4,35,-24,-73,16,-83,32,6,37,54,-57,-8,101,13,-27,-27,-25,8,-1,38,41,23,-12,-23,127,46,-15,-21,-63,36,54,92,-7,94,-12,-29,0,8,-2,-4,-30,36, 
  /* [6][0][][] */ 15,-47,30,-29,-20,104,-38,-73,-25,-80,-101,59,6,39,-2,60,1,27,-7,-38,-93,-9,-48,-37,16,-44,0,70,-118,56,-20,-13,5,61,-63,-12,-13,-24,43,-10,-40,33,51,-82,29,61,-90,0,23,33,-59,-127,52,-8,-81,5,12,-60,29,-13,-15,-106,7,6,28,-102,-65,-35,-118,8,-42,-62,-30,-57,32,-72,64,-9,-42,17,-26,103,-13,-59,65,-24,-13,7,-77,45,-66,94,34,-22,69,-121, 
  /* [7][0][][] */ -6,12,-46,71,-2,-22,21,-18,-92,0,90,35,2,-59,-22,-16,-28,18,23,-6,-60,-40,-21,-63,64,18,-6,47,22,15,7,9,-31,-127,52,88,-10,-7,-55,19,13,-20,-15,-52,10,69,46,85,9,39,-22,34,43,-40,69,-41,-2,51,-84,-16,77,21,6,-33,80,-28,127,-50,-25,-23,87,-11,-13,-11,-79,-18,37,-22,104,-19,-1,-19,-42,-40,30,28,-48,55,8,1,-14,25,75,-19,62,-6, 
  /* [8][0][][] */ 26,-65,25,23,-27,10,26,31,14,5,69,46,14,10,-61,-1,79,19,11,34,25,-50,-54,-31,-51,-33,62,26,9,57,36,-12,-1,34,46,-6,-13,-13,19,-40,31,50,12,-48,26,-32,32,-13,41,-1,47,14,-15,-8,-11,-1,-13,97,-46,13,-3,-5,-56,-23,-80,-2,-43,10,30,27,48,-22,-29,-127,50,-82,-9,-9,-71,22,-30,-11,15,64,72,-60,-37,37,-34,63,24,8,-55,12,28,-38, 
  /* [9][0][][] */ 0,-20,-21,36,2,-2,-10,44,-18,-3,51,37,-7,41,29,-41,-18,23,-27,-35,-12,18,6,3,-25,14,-8,4,27,-21,38,-12,10,-24,-6,34,-37,-10,13,7,-18,-26,-5,13,-3,31,24,32,-37,-3,-15,19,126,33,-2,-10,16,1,12,4,-17,-13,81,18,22,23,70,-9,23,-26,1,2,17,-127,-52,-102,-21,3,30,13,-1,2,10,-50,20,8,-52,-6,6,108,24,12,34,44,-17,43, 
  /* [10][0][][] */ 42,40,-16,-33,-19,20,-43,1,59,-3,-72,36,27,9,21,-73,-41,-12,18,-15,31,0,-23,-38,6,-7,-77,60,-40,80,10,27,6,24,-26,6,-3,-7,11,-6,34,-17,50,-49,-21,-10,16,33,6,20,27,-36,-21,-31,-11,43,-27,-11,-22,-17,31,-77,9,-4,-20,-45,-92,-19,-77,-3,14,-10,-35,25,58,28,49,-40,-80,4,-40,63,-19,-19,17,-1,-67,-127,-39,42,8,18,77,-27,32,41, 
  /* [11][0][][] */ 16,-52,-27,4,-63,47,3,5,60,-10,-46,-40,-14,-14,5,8,-16,31,4,-61,29,25,20,-72,34,11,66,20,32,-46,-19,33,17,124,-92,2,40,-1,73,2,-62,53,-13,17,-36,-8,-17,-34,54,-23,-38,14,-8,-2,-96,78,-47,-14,1,-13,54,-43,-23,-118,-32,-63,-127,-86,21,-5,-106,52,40,-4,10,-20,26,48,-100,-57,-16,18,-6,-4,-44,-11,96,87,-8,-50,19,10,-3,43,91,40, 
  /* [12][0][][] */ 19,27,-24,-9,4,-26,-6,20,41,-23,13,16,10,-31,-4,12,-4,-29,-22,5,2,35,3,45,-39,-44,-127,-20,85,-35,14,-5,-4,-74,80,6,21,-18,-10,26,15,-50,17,65,26,-5,46,-4,-62,-7,-28,88,68,-24,68,-52,12,40,-53,-23,21,84,35,25,-1,11,29,16,95,16,39,34,-4,-17,-28,10,-13,-36,37,-37,11,-44,29,-45,-5,8,15,-93,7,12,-44,-5,14,47,-1,44, 
  /* [13][0][][] */ -34,19,-74,-13,17,19,-12,-12,25,53,-66,24,-32,-33,18,-48,-11,19,70,-8,-10,-41,22,34,74,32,-8,30,36,24,58,-12,-3,56,-37,34,-2,-44,-18,-22,-30,-12,34,4,28,34,-29,3,-29,21,5,-18,-45,-24,14,45,9,-58,-9,-20,10,-52,0,-48,0,34,98,-20,38,-18,-50,-28,14,50,-62,60,30,-63,127,-49,-29,-8,19,1,18,48,-23,8,-26,-41,0,34,16,7,42,34, 
  /* [14][0][][] */ -20,51,18,13,-71,-45,8,28,-49,-42,43,-14,-67,-32,49,-6,-25,34,-9,23,-14,18,-94,1,-59,5,-65,-103,28,-11,38,61,-26,21,37,-26,-38,-65,-16,-24,-7,-28,22,19,-15,19,-68,3,7,-53,88,50,-15,18,-22,2,-38,26,-3,46,59,58,-15,25,17,-27,5,-94,51,73,64,56,-43,38,2,8,38,3,47,39,-67,78,13,-127,71,-15,8,26,-78,-33,-12,-13,-33,14,22,74, 
  /* [15][0][][] */ 60,-31,13,-4,35,0,-28,-16,11,31,-95,-24,61,62,-3,-32,-13,-15,-109,25,-30,-8,43,40,107,-51,127,10,40,-44,-59,50,61,11,-31,-96,52,60,73,73,103,29,-3,-4,-57,-123,4,-26,-57,-29,-15,-41,-19,-63,-85,81,-19,9,-10,9,30,-93,-14,47,40,27,-77,30,-16,-49,-6,-14,8,-116,-52,-118,6,39,-103,42,69,-24,39,29,-63,10,10,-22,34,86,-6,-62,-16,-43,7,-71, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0018861509161069989, 0.0015096828574314713, 0.0027289616409689188, 0.0019465833902359009, 0.0037542369682341814, 0.0045615467242896557, 0.0024870289489626884, 0.002029595198109746, 0.0051891906186938286, 0.0049934471026062965, 0.0033762506209313869, 0.0020484169945120811, 0.0028453748673200607, 0.0040011233650147915, 0.0023994091898202896, 0.0020551232155412436, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 6045, -664, -1221, 12199, 4340, -2493, 3635, -69, 1343, -3300, 2700, 4787, 6462, -2649, -1391, -9027, 2969, 3641, -2435, 3366, 2425, 2721, -6970, -643, -244, 13228, -7324, -5710, 4338, -3263, 2456, 1900, 7338, -2330, -2340, 758, 1065, 4691, -1002, 10583, -273, 3620, 2937, 429, 4320, 88, 6123, 2890, -3231, -2083, -1976, -729, -226, -5467, -664, 821, -2156, 5768, 126, 5266, 15, -713, -348, 3493, 16165, 1234, 13845, 6358, -4111, 2494, 9892, 262, 66, -921, -4712, -1300, 29000, 8226, 13311, 5334, 11780, -1434, 4813, 17088, 233, -3229, 8238, -4755, 4592, 2500, -10124, -2121, 6986, 4133, 14054, -2658, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00016258780669886619, 0.00032609721529297531, 0.00012090265227016062, 9.0486457338556647e-05, 0.00020389218116179109, 0.00031718163518235087, 0.00010333290265407413, 0.00017158593982458115, 0.00027394009521231055, 0.00026835341122932732, 0.00027646063244901597, 8.3417558926157653e-05, 0.00014409598952624947, 0.00015019487182144076, 0.00020915330969728529, 0.00012407002213876694, 0.00020422106899786741, 0.0001923626841744408, 0.00038273233803920448, 0.00028476270381361246, 0.00013848698290530592, 0.00019064988009631634, 8.5656989540439099e-05, 0.00023497080837842077, 0.0015012094518169761, 8.7961438111960888e-05, 0.00023452706227544695, 0.00014564233424607664, 0.00030822918051853776, 0.00017868209397420287, 0.00013549216964747757, 0.0002314039011253044, 8.1244921602774411e-05, 0.00037245408748276532, 0.00024249499256256968, 0.00014298125461209565, 0.00043095031287521124, 0.00011932260531466454, 0.00026768850511871278, 0.00011244579945923761, 0.0005080203409306705, 0.00019469324615783989, 0.00018836735398508608, 0.00032434228342026472, 0.00014159348211251199, 0.00023381230130326003, 0.00023825955577194691, 0.00030070182401686907, 0.0002667232183739543, 0.00016316089022438973, 0.00030271330615505576, 0.00019597678328864276, 0.00015749683370813727, 0.00019378447905182838, 0.00035053191822953522, 0.00054468883899971843, 0.00012165770749561489, 0.00037517724558711052, 0.00058341654948890209, 0.00019283691653981805, 0.00033042905852198601, 0.00039239710895344615, 0.00016350389341823757, 0.00012015196261927485, 0.00019126039114780724, 0.00031915292493067682, 0.00013210189354140311, 0.00010447853856021538, 0.00029950763564556837, 0.0002914474462158978, 0.0001712815574137494, 0.00038026351830922067, 0.00081169221084564924, 0.00019027847156394273, 0.00011668817023746669, 0.00021512442617677152, 4.1836665332084522e-05, 0.00018834520597010851, 0.00011148093472002074, 0.00022077510948292911, 7.9100514994934201e-05, 0.0002357457997277379, 8.7302512838505208e-05, 0.00018686379189603031, 6.4480365836061537e-05, 0.00025805484619922936, 0.00012126954243285581, 0.00022099113266449422, 0.00022286034072749317, 0.00020798880723305047, 9.852151561062783e-05, 0.00019661817350424826, 0.00018951021775137633, 0.00015976642316672951, 9.4623173936270177e-05, 0.00039693736471235752, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -59,-28,-10,-22,47,15,20,-30,3,10,-25,-81,3,17,0,39,-48,-3,42,-37,-81,23,55,58,25,-60,-21,8,18,-7,19,-15,-50,17,-26,-39,-9,-73,-25,-20,-22,-5,31,17,-66,52,-10,-26,-15,47,-8,64,-81,23,30,-7,-15,-10,15,-49,-10,-16,2,-102,-8,-41,-57,-87,-17,12,-76,-29,17,25,18,3,-22,18,123,-64,-62,33,-68,-44,-2,-25,-14,0,-9,-40,-22,-41,-19,-13,-2,38, -21,30,105,-70,-59,-7,127,-72,12,-30,-68,-66,-73,-38,-123,83,-6,51,127,-46,-118,127,85,127,41,-50,57,42,108,29,122,-9,-106,-5,-88,-57,-22,-59,127,-88,-64,-127,-26,-33,38,-45,-20,-1,-10,25,6,119,-95,15,-73,-18,-58,-24,-11,-11,-6,-127,-87,-102,-28,-30,-14,-82,-10,10,17,127,-127,2,30,-25,-89,-26,-18,-127,-54,22,-31,-87,127,127,-63,2,-127,-28,84,-8,-10,127,-50,-74, -11,-16,-84,-55,42,17,68,-29,-8,-34,-44,-40,-23,7,9,-21,-24,-17,47,-38,-67,-3,4,58,6,-55,-40,16,-3,-4,33,46,-17,18,-32,63,-6,-84,-11,-20,-20,14,14,27,-12,-27,-26,-31,1,48,-14,71,-2,11,18,-7,84,-25,14,0,-17,-34,-68,-46,-18,-63,107,-15,0,13,-33,-17,0,17,16,14,-53,35,-70,-8,-127,25,-127,-70,32,-64,50,-41,-24,-74,-7,67,-8,23,-5,38, 
  /* [0][1][][] */ -47,3,16,-66,18,116,-83,-25,-5,13,-22,-71,-56,50,25,127,-40,14,57,20,59,-31,90,1,69,-12,47,11,-26,3,-31,-63,-127,3,58,-16,-19,-25,-29,-127,9,-13,46,-2,-123,127,-92,-95,34,94,18,-48,-96,50,50,-34,29,-31,42,-23,13,30,103,-10,-62,11,-38,-17,8,-17,-127,-7,67,127,38,-60,-112,-49,-56,-2,-9,4,19,-79,63,28,-127,99,-12,127,95,-93,93,-38,-42,5, 127,127,101,127,-127,-127,81,-91,127,127,-90,-120,-40,127,-33,105,127,-127,46,127,127,-108,74,-116,-127,-127,127,127,-127,127,-52,127,9,127,127,-107,127,127,15,-27,127,15,-127,-76,127,-27,127,127,127,-121,127,-127,92,127,-127,127,-127,127,-127,127,-110,120,84,-20,83,127,-5,127,-42,-127,18,-125,-2,91,127,63,-14,-127,114,-42,-7,127,62,127,91,122,-126,127,-13,58,18,-4,-127,-23,-127,-38, -82,-18,-10,-82,4,76,-74,9,-30,-35,-9,127,-127,42,14,57,-12,12,45,5,42,-50,45,26,45,28,19,14,-39,5,36,-12,-23,-27,94,127,-8,-9,-42,-57,-10,8,-7,-11,-72,-61,-51,-102,32,127,-6,-39,127,-4,85,-45,68,-29,40,-23,-7,-23,-127,-56,-99,-9,-42,-9,6,-7,-125,-21,25,-64,19,127,-127,-19,-88,11,-72,-25,-58,-112,25,7,-52,-10,1,-102,127,127,-53,-18,-37,6, 
  /* [0][2][][] */ -61,-36,-113,-49,9,25,-49,26,-17,6,50,-91,54,30,12,-15,-24,-22,-38,-45,-23,-23,127,-25,38,-25,-16,-6,-26,13,-46,-33,24,8,19,-48,-13,-54,-11,-29,-2,-41,9,29,-21,12,-78,-21,-25,-6,-12,-26,-18,-30,31,-10,61,-40,9,-64,-8,32,45,62,-65,-7,127,87,38,2,-6,-20,-17,-16,5,6,-123,-12,-71,29,-77,8,-27,-36,-9,17,35,-7,7,-5,16,-46,-52,-69,-6,-3, 2,-39,-48,-118,-53,-15,37,127,-50,63,127,-74,12,-8,127,62,-23,-43,4,-64,-76,-60,63,-36,25,48,37,17,-27,0,-127,-74,55,-21,-81,-31,-94,-82,77,5,-18,-59,-56,127,-5,-37,-14,11,-6,-29,-26,-2,70,70,-51,-25,-7,-73,31,-112,127,-6,74,103,-127,-46,-42,-14,127,2,18,67,5,-21,11,-29,-123,-55,7,123,-94,-44,-118,-105,8,-116,-23,8,10,12,20,11,-35,-100,-43,127, -39,-14,-127,-64,22,19,-24,80,-19,-18,11,-21,-6,31,7,-84,5,-3,-9,-43,-10,-6,-57,-4,4,33,1,-2,-22,14,-43,-23,72,8,37,-10,-9,-46,-26,-6,-20,22,-15,16,3,-17,-52,15,-13,21,-13,-17,38,-26,29,5,105,-32,8,-59,18,45,-58,127,-51,-23,-60,62,31,8,-23,-17,-31,0,-17,-14,-88,-3,127,-38,-47,-14,-31,-16,7,-13,58,-12,9,-17,-27,11,-32,-52,-16,0, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0069099818356335163, 0.013859131373465061, 0.0051383627578616142, 0.0038456744514405727, 0.0086654173210263252, 0.013480219058692455, 0.0043916483409702778, 0.0072924024425446987, 0.011642453260719776, 0.011405020020902157, 0.011749576777219772, 0.0035452460870146751, 0.0061240792274475098, 0.0063832816667854786, 0.0088890157639980316, 0.0052729756571352482, 0.0086793955415487289, 0.0081754140555858612, 0.016266124323010445, 0.012102414853870869, 0.00588569650426507, 0.0081026200205087662, 0.0036404221318662167, 0.0099862590432167053, 0.063801400363445282, 0.003738360945135355, 0.0099673997610807419, 0.0061897989362478256, 0.013099740259349346, 0.0075939889065921307, 0.0057584168389439583, 0.0098346658051013947, 0.0034529089462012053, 0.01582929864525795, 0.010306037031114101, 0.0060767033137381077, 0.018315387889742851, 0.0050712106749415398, 0.011376760900020599, 0.0047789462842047215, 0.021590864285826683, 0.0082744630053639412, 0.0080056125298142433, 0.013784546405076981, 0.0060177226550877094, 0.0099370228126645088, 0.010126031003892422, 0.012779827229678631, 0.011335736140608788, 0.0069343377836048603, 0.012865315191447735, 0.0083290133625268936, 0.0066936151124536991, 0.0082358401268720627, 0.014897606335580349, 0.023149274289608002, 0.0051704524084925652, 0.015945032238960266, 0.024795202538371086, 0.0081955688074231148, 0.014043234288692474, 0.016676876693964005, 0.0069489153102040291, 0.0051064584404230118, 0.0081285666674375534, 0.013563998974859715, 0.0056143305264413357, 0.004440337885171175, 0.01272907480597496, 0.012386515736579895, 0.0072794659063220024, 0.016161199659109116, 0.034496918320655823, 0.0080868350341916084, 0.0049592470750212669, 0.0091427881270647049, 0.0017780582420527935, 0.0080046709626913071, 0.0047379396855831146, 0.009382941760122776, 0.0033617718145251274, 0.010019196197390556, 0.0037103567738085985, 0.0079417107626795769, 0.0027404155116528273, 0.010967331007122993, 0.0051539554260671139, 0.0093921227380633354, 0.0094715645536780357, 0.0088395243510603905, 0.0041871643625199795, 0.0083562722429633141, 0.0080541837960481644, 0.0067900726571679115, 0.0040214848704636097, 0.016869837418198586, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1301, 5989, 1912, 2078, 4458, 8345, 160, 1602, 7078, -886, 7452, 3640, 849, 828, 4132, 60, 1732, 2802, -1720, 10048, 1384, 5097, -473, -282, -7561, 456, 1642, 1503, 5507, 730, 2173, 3869, 1859, 6394, 5807, 2583, 4173, 1751, 8357, 1416, 12445, 1413, 1860, 1802, 3729, 11339, 13905, 12939, 260, -503, 2274, 3492, 2531, -2269, 3845, -23, 809, 17947, 1813, 1490, 1749, 18411, 2310, -144, 10094, 7306, 1609, 4922, 4615, 3480, 3568, 2523, -4813, 1409, 1126, 1523, 1469, 10704, 2529, 9168, 1893, 1416, 3295, 4712, 227, 4519, 4166, 1950, -345, 2534, 1024, 15844, 5468, 2849, 3134, 3988, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00031297493842430413, 0.00013006477092858404, 0.00015505720512010157, 0.00021266905241645873, 0.0001644626900088042, 9.3173686764203012e-05, 0.00038902423693798482, 0.00021613251010421664, 0.00011431427992647514, 0.00017222708265762776, 0.00011976169480476528, 0.00018493444076739252, 0.00030323228565976024, 0.00035087866126559675, 0.00016900170885492116, 0.0001343202602583915, 0.00033343513496220112, 0.00019593299657572061, 0.00020056965877301991, 9.29692541831173e-05, 0.00023431413865182549, 0.000153529123053886, 0.0003067704092245549, 0.00029544829158112407, 0.00010150177695322782, 0.00023798945767339319, 0.00024480486172251403, 0.00026158668333664536, 0.00016097436309792101, 0.00026593866641633213, 0.00027233426226302981, 0.00012208129919599742, 0.00024280634534079581, 0.00013405831123236567, 0.00011363735393388197, 0.00022653970518149436, 0.00015301058010663837, 0.00021667538385372609, 7.6407173764891922e-05, 0.00028756496612913907, 7.7763645094819367e-05, 0.00017457266221754253, 0.00022234368952922523, 0.00016072181460913271, 0.0001232583454111591, 6.7335873609408736e-05, 6.8781911977566779e-05, 7.2950191679410636e-05, 0.00024859647965058684, 0.00034504200448282063, 0.00017532425408717245, 0.00020080694230273366, 0.00021581871260423213, 0.00013338003191165626, 0.00016399352170992643, 0.00032920806552283466, 0.00034237181534990668, 5.6708220654400066e-05, 0.00015245270333252847, 0.00024386074801441282, 0.00029345336952246726, 5.68968134757597e-05, 0.00029280743910931051, 0.00033366912975907326, 0.00010087381087942049, 0.00011212188837816939, 0.00031300567206926644, 0.00015710995648987591, 0.00018690187425818294, 0.00016925620730035007, 0.00017410567670594901, 0.00014183289022184908, 0.00013275422679726034, 0.00025682989507913589, 0.00034769336343742907, 0.00030581667670048773, 0.00015500087465625256, 8.3136641478631645e-05, 0.00022235594224184752, 0.0001021546995616518, 0.00017983287398237735, 0.00017882464453577995, 0.00013146837591193616, 0.00018760780221782625, 0.00024537218268960714, 0.00012610557314474136, 0.00014802948862779886, 0.00025736266979947686, 0.00035644619492813945, 0.00028952298453077674, 0.00017107845633290708, 6.0804293752880767e-05, 0.00012581942428369075, 0.00012799502292182297, 0.00016121608496177942, 0.00016087111725937575, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 49,24,-14,66,-127,-10,85,51,26,88,0,69,19,7,18,65, 
  /* [1][0][][] */ -36,-18,-62,-27,127,90,15,0,-9,24,-60,28,-32,53,-66,-49, 
  /* [2][0][][] */ -61,54,74,16,57,105,20,58,33,-24,52,-32,62,-127,15,27, 
  /* [3][0][][] */ 127,-38,-3,-23,66,35,5,24,19,19,-45,2,-37,74,-54,65, 
  /* [4][0][][] */ -127,-14,15,-38,-59,21,-8,7,-7,32,-44,-77,-45,-2,-71,107, 
  /* [5][0][][] */ -69,13,25,0,127,21,14,27,-62,53,-7,34,-54,45,-79,-42, 
  /* [6][0][][] */ -127,39,-26,1,4,-68,76,-1,30,-17,-60,38,10,-13,-48,-1, 
  /* [7][0][][] */ -27,32,77,-38,110,87,127,-5,15,17,-8,-18,-2,4,-40,-11, 
  /* [8][0][][] */ -11,-70,-22,113,-71,82,-101,-15,-3,-61,118,50,127,16,-83,35, 
  /* [9][0][][] */ -5,-127,21,63,-36,-82,-8,40,45,48,-11,76,-63,28,2,-45, 
  /* [10][0][][] */ 16,-34,-105,59,-43,127,82,-27,-4,-43,31,-14,-46,101,-69,23, 
  /* [11][0][][] */ -81,-87,-24,4,-15,82,34,-17,-22,21,58,-93,-13,86,-91,127, 
  /* [12][0][][] */ -31,-80,-93,82,-100,-127,-17,32,96,72,-11,77,-33,-64,-25,-4, 
  /* [13][0][][] */ -59,7,-49,1,-9,6,34,-2,-22,127,-3,-22,15,27,10,-7, 
  /* [14][0][][] */ -109,-38,-1,-48,36,31,-4,-81,78,13,19,-33,47,-78,-127,-97, 
  /* [15][0][][] */ 14,-127,86,-45,-67,-59,14,42,8,-85,-120,-59,123,-56,-15,-60, 
  /* [16][0][][] */ -34,-32,5,-13,1,24,1,-11,30,-127,48,-24,8,-10,-53,-69, 
  /* [17][0][][] */ 28,-4,44,-39,25,-7,-41,-2,58,-14,5,47,109,-37,-24,-127, 
  /* [18][0][][] */ 17,-13,-15,-95,-24,-24,127,-10,-11,10,-6,26,-14,43,-34,-68, 
  /* [19][0][][] */ 12,-6,-24,-73,-121,11,2,-30,-5,-23,-8,-127,-40,-13,-40,-24, 
  /* [20][0][][] */ 13,108,68,-127,75,11,-65,49,-80,-122,59,-49,-89,113,38,2, 
  /* [21][0][][] */ -7,-76,-106,13,127,36,95,9,-81,-48,-25,37,103,-62,1,55, 
  /* [22][0][][] */ 60,-12,84,-61,-35,-33,87,24,12,127,32,7,1,13,123,-21, 
  /* [23][0][][] */ -101,-127,-27,120,80,59,73,64,15,-45,-12,-61,-4,107,49,114, 
  /* [24][0][][] */ 93,-18,71,19,8,-79,9,-13,45,127,-105,67,5,-58,120,-70, 
  /* [25][0][][] */ 127,-10,63,103,37,30,-1,20,-108,60,48,-62,4,29,66,2, 
  /* [26][0][][] */ -20,16,-1,50,-37,127,-12,66,-81,-39,-75,50,12,51,17,-124, 
  /* [27][0][][] */ 60,10,-9,-40,-40,-9,-121,-14,-127,-9,-82,-39,-89,43,-21,125, 
  /* [28][0][][] */ -39,67,8,-6,18,-4,-127,-37,-42,-5,11,6,29,-59,-50,-17, 
  /* [29][0][][] */ -30,-127,-32,104,-23,19,97,24,74,39,-96,62,34,-25,-18,82, 
  /* [30][0][][] */ 51,-21,-74,-14,-127,8,46,-60,0,12,-22,0,19,62,-13,48, 
  /* [31][0][][] */ -100,-13,16,91,-75,46,-47,-25,-26,-79,39,-56,-4,-74,-6,127, 
  /* [32][0][][] */ -106,-69,-66,-26,-90,-16,-22,-63,127,69,-49,-56,10,23,6,-32, 
  /* [33][0][][] */ 35,16,-111,60,-117,-127,29,-11,-125,32,-70,-44,-29,94,74,36, 
  /* [34][0][][] */ -7,54,7,15,-62,-14,16,-36,0,-127,21,57,-9,40,33,108, 
  /* [35][0][][] */ 35,-14,-63,0,-127,11,72,-25,-28,48,15,-10,9,37,20,79, 
  /* [36][0][][] */ -15,-7,-34,40,127,-29,36,69,-47,23,-82,-41,37,2,-5,24, 
  /* [37][0][][] */ -127,34,-32,-87,80,-81,-19,-8,-22,15,-30,60,72,-48,-15,-106, 
  /* [38][0][][] */ 13,127,17,-99,-97,-28,-68,-73,-65,-92,61,42,-62,-91,84,16, 
  /* [39][0][][] */ 23,-37,16,48,67,49,93,-46,-26,75,16,-11,-17,109,56,127, 
  /* [40][0][][] */ 91,75,7,38,-100,-78,78,32,-97,7,-2,1,-80,-70,127,2, 
  /* [41][0][][] */ 1,-40,28,7,-77,70,1,63,-38,43,-100,33,17,16,26,-127, 
  /* [42][0][][] */ 8,-54,6,-35,106,45,67,-36,15,-121,-127,-51,-14,-13,-43,2, 
  /* [43][0][][] */ -71,-127,-5,-11,77,63,17,93,-45,-101,-111,-87,55,-27,-75,47, 
  /* [44][0][][] */ -47,-40,-127,-100,48,99,82,12,-58,-74,-25,97,-22,67,5,64, 
  /* [45][0][][] */ 1,-27,-126,0,-127,102,-48,-119,113,-82,39,-79,-37,8,-78,57, 
  /* [46][0][][] */ 4,-111,-51,14,126,-57,32,118,-21,-56,78,127,-31,-43,77,-107, 
  /* [47][0][][] */ -55,-38,-48,53,11,53,43,-4,36,62,113,38,-62,17,21,127, 
  /* [48][0][][] */ 26,-18,-121,-127,25,-56,55,75,42,-123,15,10,-59,-7,-61,-122, 
  /* [49][0][][] */ 36,49,-45,30,11,-10,39,36,-19,127,-29,43,-76,-27,38,72, 
  /* [50][0][][] */ -31,-3,0,2,-127,-1,-1,-47,58,-1,49,78,-31,-57,40,25, 
  /* [51][0][][] */ -15,-1,8,-127,-4,103,87,-36,41,16,3,-23,125,21,-40,13, 
  /* [52][0][][] */ 21,-11,22,-80,96,-102,-8,-81,13,16,127,-84,43,-16,-61,93, 
  /* [53][0][][] */ -42,-89,87,7,-6,-127,38,-111,15,57,-118,58,22,-15,25,-79, 
  /* [54][0][][] */ 43,69,10,0,-54,-11,-52,-127,-10,-4,31,24,-35,-25,25,23, 
  /* [55][0][][] */ 29,13,-19,34,-27,1,12,3,2,127,-13,36,-5,-2,-37,-3, 
  /* [56][0][][] */ 40,-90,-43,19,-41,12,-69,78,127,6,5,27,10,-53,7,23, 
  /* [57][0][][] */ 23,-25,88,-124,126,-12,38,-1,70,-37,-24,127,79,-3,50,-51, 
  /* [58][0][][] */ 45,-67,-8,-47,67,30,17,127,16,90,-17,73,51,53,45,13, 
  /* [59][0][][] */ -26,42,-16,-72,21,-53,48,-14,-24,28,-56,-21,-127,-16,41,-6, 
  /* [60][0][][] */ 26,-1,21,-9,9,-7,29,-47,-16,127,-6,44,-11,-25,-33,-4, 
  /* [61][0][][] */ 59,13,24,-17,-72,-118,-44,-27,-31,-70,31,13,-81,-11,127,122, 
  /* [62][0][][] */ -23,91,-13,9,-32,127,-35,-6,-44,16,-52,7,-50,20,32,-93, 
  /* [63][0][][] */ 42,-1,-55,-127,-7,-48,62,-25,-15,-38,-48,4,-39,41,24,-60, 
  /* [64][0][][] */ -35,19,-13,-39,52,-25,45,37,-127,-26,-38,-13,-17,69,17,73, 
  /* [65][0][][] */ 8,11,-80,3,72,4,-72,-119,-89,-45,55,52,-106,127,-4,76, 
  /* [66][0][][] */ -4,61,-42,38,-44,127,0,12,-60,7,-20,51,-27,51,60,-78, 
  /* [67][0][][] */ 34,-40,-63,-49,3,-90,68,-82,-33,35,28,127,-46,-6,15,-101, 
  /* [68][0][][] */ 14,-127,-11,49,-9,18,66,77,38,9,89,-44,-113,-4,-11,-2, 
  /* [69][0][][] */ -37,73,36,-123,87,45,26,68,15,127,95,69,90,-52,-10,-68, 
  /* [70][0][][] */ 34,31,39,-29,126,-1,-74,-23,-127,-49,13,42,-52,82,-84,15, 
  /* [71][0][][] */ -37,-24,5,-75,127,19,69,9,-64,76,-99,-33,-10,45,-26,37, 
  /* [72][0][][] */ -18,25,75,68,-85,2,-127,-75,-19,14,-33,25,-2,69,-55,-11, 
  /* [73][0][][] */ -20,-4,-11,-75,3,-103,41,-33,66,93,104,-28,40,-45,-93,127, 
  /* [74][0][][] */ 5,-2,-38,65,-80,12,91,37,59,42,32,87,127,26,-59,19, 
  /* [75][0][][] */ -37,37,-28,10,-53,127,-11,0,-4,-9,-26,21,8,41,25,-31, 
  /* [76][0][][] */ -91,69,-45,89,-127,20,-28,33,63,20,-38,-57,58,-59,-108,46, 
  /* [77][0][][] */ 68,64,-123,57,56,97,88,53,9,19,127,19,27,67,37,27, 
  /* [78][0][][] */ 8,-52,18,-75,82,-127,9,-64,61,59,117,-42,11,-38,-61,113, 
  /* [79][0][][] */ -28,81,13,-18,-6,-76,-33,-22,-127,15,43,-12,90,19,-104,-64, 
  /* [80][0][][] */ -95,37,26,-46,64,72,8,-127,-80,43,-24,-15,-16,-42,-9,81, 
  /* [81][0][][] */ 76,98,-48,-13,-18,0,95,86,-85,86,-24,-51,-65,2,112,127, 
  /* [82][0][][] */ 41,127,-83,-99,-29,-40,93,-116,28,-15,9,96,62,-22,98,-1, 
  /* [83][0][][] */ 19,-23,28,28,-2,13,-36,-88,71,-24,64,-3,30,-71,-55,-127, 
  /* [84][0][][] */ -127,-89,-49,9,-12,110,81,14,72,46,110,77,52,54,-42,24, 
  /* [85][0][][] */ 127,11,77,-31,65,-14,-62,81,2,105,-60,26,-11,80,118,-1, 
  /* [86][0][][] */ -65,57,-12,16,26,67,9,27,93,33,127,-8,-47,31,-10,-26, 
  /* [87][0][][] */ -10,-74,24,-63,36,-127,37,-37,46,-37,90,-34,35,-36,-26,101, 
  /* [88][0][][] */ -58,21,35,-19,106,-18,33,21,-21,-64,77,-33,26,96,127,-83, 
  /* [89][0][][] */ -29,51,-3,40,-27,127,-23,28,-36,23,-53,39,-24,63,46,-104, 
  /* [90][0][][] */ 54,-52,19,55,127,-42,31,10,-2,-60,-103,-21,9,0,-34,24, 
  /* [91][0][][] */ -8,57,-17,-46,74,-80,-112,85,-47,95,-115,-81,-127,-30,-23,-9, 
  /* [92][0][][] */ 67,29,64,62,-127,-107,14,21,-43,21,-52,-10,1,-47,19,-24, 
  /* [93][0][][] */ 43,-74,-82,17,-30,-97,-73,73,127,102,-31,79,-31,70,-20,-75, 
  /* [94][0][][] */ 75,-10,127,-47,43,-70,23,70,15,107,9,78,-5,15,117,-10, 
  /* [95][0][][] */ -88,-46,2,14,127,24,53,111,7,-35,-49,-88,-9,-7,-71,24, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0046119778417050838, 0.0019166257698088884, 0.0022849126253277063, 0.0031338769476860762, 0.0024235113523900509, 0.0013730012578889728, 0.0057326355017721653, 0.003184914356097579, 0.0016845276113599539, 0.0025379268918186426, 0.0017648003995418549, 0.0027251816354691982, 0.0044684107415378094, 0.0051705245859920979, 0.0024903980083763599, 0.0019793345127254725, 0.0049134781584143639, 0.0028872557450085878, 0.0029555812943726778, 0.0013699887786060572, 0.0034528377000242472, 0.0022623948752880096, 0.0045205485075712204, 0.0043537062592804432, 0.0014957234961912036, 0.0035069969017058611, 0.0036074283998459578, 0.0038547241128981113, 0.0023721074685454369, 0.0039188545197248459, 0.0040130997076630592, 0.001798981917090714, 0.0035779781173914671, 0.0019754744134843349, 0.001674552564509213, 0.0033382740803062916, 0.002254753839224577, 0.0031929141841828823, 0.0011259310413151979, 0.0042375382035970688, 0.0011459199013188481, 0.0025724910665303469, 0.0032764419447630644, 0.0023683859035372734, 0.0018163268687203526, 0.00099225691519677639, 0.0010135656921193004, 0.001074989209882915, 0.0036633012350648642, 0.0050845160149037838, 0.0025835665874183178, 0.002959077712148428, 0.0031802903395146132, 0.001965479226782918, 0.0024165976792573929, 0.0048511880449950695, 0.0050451685674488544, 0.00083564856322482228, 0.0022465328220278025, 0.0035935158375650644, 0.0043243095278739929, 0.00083842768799513578, 0.0043147909455001354, 0.0049169263802468777, 0.0014864697586745024, 0.0016522207297384739, 0.0046124309301376343, 0.0023151619825512171, 0.0027541737072169781, 0.0024941482115536928, 0.0025656097568571568, 0.0020900401286780834, 0.0019562575034797192, 0.0037846281193196774, 0.005123586393892765, 0.0045064943842589855, 0.0022840825840830803, 0.0012250960571691394, 0.0032766223885118961, 0.0015053448732942343, 0.0026500052772462368, 0.0026351481210440397, 0.0019373092800378799, 0.0027645761147141457, 0.0036157881841063499, 0.0018582834163680673, 0.0021813528146594763, 0.0037924791686236858, 0.0052525675855576992, 0.0042663915082812309, 0.0025210008025169373, 0.00089600804494693875, 0.0018540667369961739, 0.0018861262360587716, 0.0023756695445626974, 0.0023705861531198025, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -3402, 12316, -20795, -1861, 5232, -14009, -32990, -14927, -9204, 2198, -12616, -12287, 4837, -5521, -4860, -2236, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00012138843158027157, 9.4241928309202194e-05, 9.4261413323692977e-05, 0.00011556621757335961, 0.00010429198300698772, 0.00012589532707352191, 0.00012220809003338218, 0.00014189115609042346, 9.088935621548444e-05, 0.00013832238619215786, 0.00013598956866189837, 0.00016542669618502259, 0.00011871963215526193, 7.1287118771579117e-05, 0.00012632885773200542, 0.00010135706543223932, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 33,41,5,-39,51,72,-48,80,-1,113,-2,36,-34,50,-12,47,35,73,61,-50,-70,72,0,49,62,41,31,58,-57,-62,-18,78,-24,30,-77,30,50,-127,-38,18,12,-25,62,-8,-16,-66,-54,-51, 
  /* [1][0][][] */ -60,17,-87,-61,10,89,-81,4,-6,-65,-53,29,82,-8,-23,-28,-24,-37,-19,34,-82,57,-104,-49,-50,-25,44,66,-45,-26,39,-64,18,-55,-47,71,17,-43,127,-36,-22,22,-85,-7,42,45,52,38, 
  /* [2][0][][] */ -2,-1,51,-23,-46,-110,29,51,123,120,-61,35,115,-85,127,106,-60,-21,-45,25,108,-119,-53,-101,22,-27,46,-88,59,35,-64,30,47,-36,75,16,-97,-3,19,-35,-9,20,85,-36,16,-83,93,-80, 
  /* [3][0][][] */ 44,-6,-22,-28,33,105,6,-14,49,-40,12,-26,-48,6,15,51,-49,-65,26,-105,-17,9,3,-20,-31,87,127,37,-30,-58,10,36,66,-37,83,43,-28,-66,-3,35,50,7,15,-1,11,7,9,-2, 
  /* [4][0][][] */ 92,-31,23,-39,74,67,68,8,52,3,-91,42,42,-7,26,-17,-113,-100,-10,-99,0,3,-36,-16,-90,127,-110,114,-41,-25,46,89,19,-65,27,-32,6,35,-15,39,-55,-1,-4,76,-41,111,-43,-42, 
  /* [5][0][][] */ -10,0,-60,11,-2,59,23,-13,47,56,40,92,42,-28,27,-10,-49,127,-29,27,11,-9,-55,-8,24,-6,-54,-39,-11,18,24,0,-40,-5,45,20,-50,0,-77,5,83,-28,39,40,4,13,-44,30, 
  /* [6][0][][] */ 59,-10,11,73,3,-10,102,-29,21,63,125,90,16,53,-59,37,17,-35,-98,69,46,-45,-27,55,-82,68,68,-14,124,43,-15,8,71,-34,-103,-3,77,15,7,-9,21,37,52,-36,58,127,14,-16, 
  /* [7][0][][] */ -89,-24,-12,14,-47,-56,28,39,77,127,-55,-70,-96,28,-6,-9,-81,81,15,114,-42,56,42,39,-8,-69,-33,-75,27,40,-13,13,-4,26,1,1,20,-40,108,28,39,55,33,1,54,70,-18,9, 
  /* [8][0][][] */ -17,-109,59,-49,46,-82,98,-53,-41,-124,41,17,-39,12,21,32,-8,26,-32,94,23,29,-30,56,62,5,-66,-49,-127,-3,-43,-108,-6,-96,27,79,-25,40,127,36,21,3,70,126,-13,-69,-53,89, 
  /* [9][0][][] */ 28,-58,30,-62,36,63,-39,41,24,-12,-31,-4,10,-30,103,-20,-20,-96,24,64,-66,51,41,-20,-26,-59,-27,67,36,78,-15,-28,-49,34,-7,127,1,-29,-55,-12,-31,-11,27,99,45,70,-56,28, 
  /* [10][0][][] */ -25,32,-27,0,13,26,-66,-37,32,38,65,3,-30,-22,37,-41,-47,127,3,43,11,-20,9,27,-57,42,14,81,50,17,-23,-6,51,-7,6,13,-23,-49,-28,17,-81,-5,8,-20,7,34,24,31, 
  /* [11][0][][] */ -42,36,-15,49,45,59,25,11,18,29,-127,-70,41,24,-21,-52,21,36,-47,-62,-5,-11,102,14,44,26,-48,50,-12,29,-4,70,23,-1,-45,-14,35,80,118,29,14,-36,79,-15,-41,-14,64,-16, 
  /* [12][0][][] */ -72,9,32,7,-77,-54,-5,7,-32,-30,-127,4,64,-102,25,39,36,91,60,-95,-37,39,-42,-68,6,-13,47,-44,17,11,-20,59,64,67,51,-16,-58,-36,25,13,-24,4,61,2,29,-26,-28,-25, 
  /* [13][0][][] */ -12,-80,-36,-95,14,42,32,16,-75,19,90,-73,36,43,113,29,77,2,-26,-72,53,-52,127,-12,-44,-26,-19,13,-42,-113,-114,13,62,-14,-80,62,49,-71,58,-59,11,18,72,29,33,-31,90,-58, 
  /* [14][0][][] */ 45,18,-55,-2,-31,16,-88,-40,-22,48,49,44,6,-26,7,-44,60,-85,18,18,70,-36,17,-6,-8,127,-92,11,-60,-22,-71,-18,95,18,58,-10,-64,25,-12,54,-23,-40,70,-13,-49,-33,-24,58, 
  /* [15][0][][] */ -70,22,30,11,88,19,-32,36,9,80,-24,57,58,-3,-23,-34,-1,39,-3,-29,20,-24,-46,-92,49,-69,-32,67,-17,15,26,7,-85,-11,127,7,-103,27,40,-29,-45,-16,4,-3,-36,-48,7,19, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0051590083166956902, 0.0040052817203104496, 0.0040061101317405701, 0.0049115642905235291, 0.0044324090704321861, 0.0053505511023104191, 0.0051938439719378948, 0.0060303742066025734, 0.0038627975154668093, 0.0058787013404071331, 0.0057795564644038677, 0.0070306346751749516, 0.0050455844029784203, 0.0030297024641185999, 0.0053689763881266117, 0.0043076751753687859, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 11302, 253, 15973, -2502, 9309, -663, 42424, 659, 3528, 20378, 6595, 26465, 7863, 8031, 40387, 20966, 1913, 7989, -6022, 52995, 1697, 20332, 2389, 13644, 6923, 27580, 773, -2796, 2177, 16929, 16080, -1429, 399, 1113, 2744, 15557, 10638, 39211, 7577, 19709, 22189, 7328, 901, 12087, 12778, -2045, 49003, 28245, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.6786411227658391e-05, 7.372834807028994e-05, 7.1030990511644632e-05, 0.00014846833073534071, 0.00014439367805607617, 0.00010023679351434112, 5.4242853366304189e-05, 0.00010168746666749939, 7.8608645708300173e-05, 0.00011470883328001946, 4.3836000259034336e-05, 8.2171405665576458e-05, 4.100017758901231e-05, 0.00014552472566720098, 3.7479458114830777e-05, 6.9894245825707912e-05, 8.0770201748237014e-05, 4.2382976971566677e-05, 0.00014021922834217548, 3.9710128476144746e-05, 6.4152591221500188e-05, 6.3509774918202311e-05, 7.1321745053865016e-05, 0.00011445601558079943, 0.00010960739018628374, 8.4965322457719594e-05, 6.1570615798700601e-05, 6.013677193550393e-05, 0.00025183585239574313, 8.1145073636434972e-05, 6.8114815803710371e-05, 0.00023671926464885473, 8.8629923993721604e-05, 0.00017697777366265655, 0.00012875160609837621, 8.4244973550084978e-05, 6.4239808125421405e-05, 4.4005133531754836e-05, 6.0437894717324525e-05, 9.8918979347217828e-05, 7.8121345723047853e-05, 9.6628544270060956e-05, 0.00028544414089992642, 8.4360959590412676e-05, 0.00011709224054357037, 7.004440703894943e-05, 3.2012656447477639e-05, 7.545490370830521e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -88,50,-75,127,-55,86,-82,125,-96,6,107,-71,71,-58,-58,-35,116,121,82,-30,127,-88,42,-28,48,-61,79,31,-113,-30,-19,-12,31,-93,118,-120,-127,-127,77,-52,44,-126,54,-94,54,51,-53,-102, -127,50,-30,87,-61,93,-82,38,-127,-64,93,-36,127,-56,-41,-80,115,108,127,-127,110,-30,83,-74,-30,-127,127,68,0,-26,-94,96,93,-127,127,-127,-96,-108,123,-114,-26,53,127,-109,-71,84,-32,-109, -66,39,57,59,9,53,3,86,-68,-1,59,-28,63,-34,-70,-21,24,84,101,-124,59,-41,22,-28,-102,-21,28,17,35,1,-22,22,44,-82,79,-33,-111,-55,40,-89,-56,-73,67,-15,-100,56,-50,-127, 
  /* [0][1][][] */ -75,86,-75,96,-25,127,-127,93,-39,-60,117,-127,45,-90,-127,-102,82,108,-21,-93,97,-127,85,-75,-60,-65,96,80,-114,-127,-76,0,96,29,98,-113,-103,-69,48,-18,-72,-127,107,-127,75,50,-127,-82, -113,92,-127,59,-127,82,-113,61,-70,-127,127,-97,93,-127,-55,-127,120,127,-4,-120,103,-119,127,-127,-30,-68,126,127,17,-109,-127,121,127,37,114,-126,-121,-60,127,-127,-127,70,75,-81,-90,127,-80,-67, -57,127,-87,55,-24,26,-38,105,-29,-58,83,-57,46,-33,-49,-6,127,92,21,-76,53,-62,37,-36,-127,-10,30,71,100,-57,-27,51,25,24,72,23,-28,-24,33,-108,-79,-95,5,-13,-127,47,0,-34, 
  /* [0][2][][] */ -25,112,-67,59,-13,31,-125,-31,-13,-14,65,-63,70,-69,-72,-29,96,16,-61,9,19,-60,9,-81,-26,-12,55,3,-127,-46,-19,-37,50,44,25,-93,-40,-74,70,-42,-93,-59,46,-99,54,54,-96,-108, -24,98,-50,36,-45,52,-114,127,-53,-8,72,-62,63,-97,-66,-67,93,23,-75,5,39,-50,27,-62,-22,-49,86,-15,18,-91,-102,127,35,53,60,-21,-105,-72,78,-8,-93,43,101,-58,-61,104,-76,-45, -7,97,-22,26,-39,-16,-48,103,4,-2,10,-37,59,-15,-50,9,58,35,-41,2,29,-39,26,4,0,-2,33,45,73,-83,-11,17,8,48,30,-27,-81,-31,59,-29,-60,-29,-20,-13,-85,39,-1,-16, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0032634225208312273, 0.0031334548257291317, 0.0030188171658664942, 0.0063099036924540997, 0.006136731244623661, 0.0042600636370480061, 0.0023053211625665426, 0.0043217171914875507, 0.0033408673480153084, 0.0048751253634691238, 0.0018630299018695951, 0.0034922847989946604, 0.0017425075639039278, 0.0061848005279898643, 0.0015928769716992974, 0.0029705052729696035, 0.0034327334724366665, 0.0018012764630839229, 0.0059593170881271362, 0.0016876803711056709, 0.0027264850214123726, 0.0026991653721779585, 0.0030311739537864923, 0.0048643806949257851, 0.0046583139337599277, 0.0036110260989516973, 0.0026167512405663729, 0.0025558127090334892, 0.01070302352309227, 0.0034486656077206135, 0.0028948795516043901, 0.0100605683401227, 0.0037667716387659311, 0.0075215552933514118, 0.005471943411976099, 0.0035804114304482937, 0.0027301919180899858, 0.0018702181987464428, 0.0025686104781925678, 0.004204056691378355, 0.0033201570622622967, 0.004106712993234396, 0.012131375260651112, 0.0035853406880050898, 0.0049764201976358891, 0.0029768873937427998, 0.0013605378335341811, 0.0032068334985524416, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2652, -1265, 151, -1384, 3310, -918, 4059, -3253, 1200, 651, 1765, 4927, 203, -484, 251, 3839, -2700, 4456, 5995, 1406, -765, 1837, 135, 3500, 1878, 2264, 1149, -529, 9830, -258, 1867, -1119, -436, 7437, -2795, 1227, 1357, 1967, 142, 3551, 1440, 6930, -4413, 1213, 7139, 44, 3213, 4941, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00017779706104192883, 0.00033749674912542105, 0.00026940068346448243, 0.00023999730183277279, 0.00023033491743262857, 0.00026553115458227694, 0.00019347408670000732, 0.00013138743815943599, 0.00025092629948630929, 0.00034537867759354413, 0.00020831575966440141, 0.0001519842044217512, 0.00044707627967000008, 0.00033015891676768661, 0.00029361719498410821, 0.00015442517178598791, 0.000220034911762923, 0.00016872184642124921, 0.00015313003677874804, 0.00024975358974188566, 0.00035914636100642383, 0.00034062479971908033, 0.00024790014140307903, 0.00022013013949617743, 0.00025686289882287383, 0.00021286270930431783, 0.00032119866227731109, 0.00037532826536335051, 9.7460862889420241e-05, 0.00023061162210069597, 0.00015814838116057217, 0.00017549587937537581, 0.00023673451505601406, 0.00010247548198094591, 0.00019617562065832317, 0.00034947838867083192, 0.00029148650355637074, 0.00015125864592846483, 0.00023891175806056708, 0.00023288714874070138, 0.00031151590519584715, 0.00011740660556824878, 0.0001401582412654534, 0.00033853598870337009, 0.00013230957847554237, 0.00044985261047258973, 0.00018951940000988543, 0.00016144913388416171, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 75,27,127,-34,64,127,-71,-57, 
  /* [1][0][][] */ 9,-74,-127,22,78,51,5,29, 
  /* [2][0][][] */ -127,-24,-68,-18,117,38,-92,-67, 
  /* [3][0][][] */ 60,55,105,-97,-22,-127,9,-36, 
  /* [4][0][][] */ -127,3,-76,-55,48,2,-29,-85, 
  /* [5][0][][] */ -75,22,-51,1,13,33,-67,-127, 
  /* [6][0][][] */ -15,-127,-115,42,110,40,11,38, 
  /* [7][0][][] */ -45,-127,-103,-85,-75,-54,12,77, 
  /* [8][0][][] */ 69,44,-17,8,80,-30,-127,1, 
  /* [9][0][][] */ -36,82,-33,109,-43,-44,127,-40, 
  /* [10][0][][] */ -37,95,17,49,127,-35,1,57, 
  /* [11][0][][] */ -63,-72,-41,-7,-127,105,97,-25, 
  /* [12][0][][] */ 70,47,-127,43,8,-35,-80,-1, 
  /* [13][0][][] */ 104,-17,-96,24,36,-127,-31,-37, 
  /* [14][0][][] */ 31,-80,62,19,123,-127,-86,44, 
  /* [15][0][][] */ -27,-18,-2,127,68,69,-82,42, 
  /* [16][0][][] */ 78,12,-39,28,89,-79,-127,-17, 
  /* [17][0][][] */ 48,127,61,60,54,62,31,-83, 
  /* [18][0][][] */ 24,-5,5,-19,127,-2,24,-8, 
  /* [19][0][][] */ 11,101,23,-13,-127,5,41,-54, 
  /* [20][0][][] */ -41,28,83,-127,42,35,-14,96, 
  /* [21][0][][] */ 2,53,30,-127,12,28,-9,118, 
  /* [22][0][][] */ -65,-58,-72,-1,-127,95,89,-31, 
  /* [23][0][][] */ 85,6,-127,-11,-19,-67,-37,-50, 
  /* [24][0][][] */ -54,60,-29,-8,-31,59,-127,110, 
  /* [25][0][][] */ -107,-54,-127,20,-40,-57,54,100, 
  /* [26][0][][] */ 28,-17,-38,-46,110,-26,127,-65, 
  /* [27][0][][] */ 127,-53,27,74,3,29,-10,74, 
  /* [28][0][][] */ 15,80,54,16,127,-51,43,-12, 
  /* [29][0][][] */ -2,-27,-39,-43,-97,51,127,-36, 
  /* [30][0][][] */ 36,-106,-23,-91,-127,-15,33,-80, 
  /* [31][0][][] */ 6,7,-12,-30,-127,-8,-13,-23, 
  /* [32][0][][] */ 46,-58,-40,63,-28,-90,101,-127, 
  /* [33][0][][] */ 127,113,72,89,109,14,-41,-30, 
  /* [34][0][][] */ -117,-38,127,-20,6,94,107,-9, 
  /* [35][0][][] */ -43,101,127,-6,-62,-84,-30,35, 
  /* [36][0][][] */ -77,3,105,-2,7,127,56,16, 
  /* [37][0][][] */ -10,-100,-21,-127,-57,-70,64,31, 
  /* [38][0][][] */ 53,-19,74,-48,48,60,-127,8, 
  /* [39][0][][] */ -29,70,-127,-60,-4,-20,28,55, 
  /* [40][0][][] */ 98,-80,-8,46,-9,1,38,127, 
  /* [41][0][][] */ -16,107,121,-2,-13,127,-75,10, 
  /* [42][0][][] */ 49,-127,-67,-28,-92,6,20,-75, 
  /* [43][0][][] */ 3,-98,42,-67,127,-23,28,13, 
  /* [44][0][][] */ -16,127,116,-22,-19,68,-55,-24, 
  /* [45][0][][] */ -35,15,10,76,-127,43,-88,11, 
  /* [46][0][][] */ -22,-51,43,57,-127,-100,-54,-15, 
  /* [47][0][][] */ -4,39,22,-93,-127,20,-23,42, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0018588709644973278, 0.0035285335034132004, 0.0028165881521999836, 0.0025091753341257572, 0.0024081550072878599, 0.0027761321980506182, 0.0020227744244039059, 0.001373657607473433, 0.002623438136652112, 0.0036109392531216145, 0.0021779444068670273, 0.0015889970818534493, 0.0046741892583668232, 0.0034518162719905376, 0.0030697721522301435, 0.0016145174158737063, 0.002300468273460865, 0.0017639894504100084, 0.0016009768005460501, 0.0026111775077879429, 0.0037548805121332407, 0.0035612373612821102, 0.0025917997118085623, 0.002301463857293129, 0.0026855054311454296, 0.0022254828363656998, 0.0033581368625164032, 0.0039240624755620956, 0.0010189547901973128, 0.0024110479280352592, 0.0016534436726942658, 0.0018348119920119643, 0.0024750628508627415, 0.0010713826632127166, 0.0020510191097855568, 0.0036538017448037863, 0.0030474958475679159, 0.0015814114594832063, 0.0024978260044008493, 0.0024348385632038116, 0.0032569034956395626, 0.0012274878099560738, 0.0014653564430773258, 0.0035393987782299519, 0.0013832986587658525, 0.0047032157890498638, 0.001981428125873208, 0.0016879531322047114, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 1938, -3688, 29242, -8333, -1579, -15295, 4896, -20200, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 6.3468825828749686e-05, 0.0001273186644539237, 9.9883742223028094e-05, 0.00010076817125082016, 0.00010841306357178837, 6.7125823989044875e-05, 6.9117479142732918e-05, 7.9455800005234778e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -54,-44,-44,-77,35,6,110,66,-112,-82,-20,33,-81,-32,-86,7,-79,24,16,127,87,-18,32,87,88,86,46,1,-102,-76,-102,-81,-84,116,60,-26,67,-24,93,46,38,-8,-4,-113,27,-17,-24,-101, 
  /* [1][0][][] */ -29,73,-24,-44,-64,94,-28,-48,-34,76,5,32,50,43,-51,4,-51,-119,64,-61,127,24,-65,19,68,-15,-75,67,44,-22,74,25,-17,-14,-19,3,-23,102,-10,-33,98,28,3,35,112,26,-24,66, 
  /* [2][0][][] */ -37,-32,121,1,98,-25,-13,31,-36,2,-4,67,10,-41,-44,-127,-78,-124,-32,25,-127,30,-67,-60,-44,25,-1,-64,-53,-20,-35,-25,-28,-10,14,10,15,-41,-55,2,54,-36,31,-53,-52,-45,-64,-90, 
  /* [3][0][][] */ 60,30,67,-9,21,-2,32,69,-37,-21,53,-32,-37,40,-29,54,49,35,-12,8,-92,-50,120,27,16,18,-30,-54,-43,60,127,-66,30,-91,-5,61,0,-53,-24,67,-70,-47,50,12,-83,-62,58,7, 
  /* [4][0][][] */ 24,-7,72,-9,18,-11,-6,-14,-45,5,-9,28,72,-72,28,-80,45,48,-7,-51,17,51,25,-6,0,29,60,-15,36,39,-127,-28,-22,-15,6,26,63,-8,47,29,-18,-15,-57,26,-15,-80,19,21, 
  /* [5][0][][] */ 36,-70,81,47,41,31,8,23,-69,-23,-51,24,46,7,5,-47,107,93,5,-2,106,-68,121,-105,-14,64,4,48,3,25,-37,-55,-26,-39,-43,24,27,51,51,-13,-127,39,47,18,72,6,95,-4, 
  /* [6][0][][] */ -40,17,-116,65,32,-8,15,-5,-22,-13,52,-61,-79,-12,-17,18,-127,28,-12,82,31,28,-85,-75,-5,7,36,53,-42,-15,-49,21,51,54,-60,-23,-24,-4,58,14,81,57,-121,-46,-13,85,-59,-26, 
  /* [7][0][][] */ 12,82,-92,16,2,93,111,88,50,70,-111,-7,-42,11,-53,-20,57,34,117,115,72,15,109,6,114,117,-87,106,-77,13,-3,-88,16,-76,-30,80,7,88,-48,127,-60,68,8,-75,83,-7,95,-56, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0026974251959472895, 0.005411042831838131, 0.0042450590990483761, 0.0042826472781598568, 0.0046075549907982349, 0.002852847333997488, 0.0029374926816672087, 0.0033768713474273682, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 1695, 5183, -1527, -1408, 5210, -1310, 2644, -5805, -5133, 1297, -5561, -72, 505, -2040, -4304, 3591, 4950, 1496, -1895, -6153, -9045, -2331, 17049, -7365, 7060, 1187, 622, -8122, -1855, -4807, -7317, 15753, 3343, -993, 8169, 1800, 77, 814, 5905, 3596, 4205, -4549, 4140, 9244, -2250, 14290, -686, -937, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00028925098013132811, 0.00020957404922228307, 0.001105444272980094, 0.0002219996094936505, 0.00024642559583298862, 0.00045528216287493706, 0.00019974434690084308, 0.00028714319341816008, 6.9505913415923715e-05, 0.00041434771264903247, 0.00021505632321350276, 0.00135384825989604, 0.00043522077612578869, 0.00036279048072174191, 0.0002808883145917207, 0.00070350128225982189, 0.0002044276479864493, 9.6157607913482934e-05, 0.00017059159290511161, 0.00023978450917638838, 0.00016205350402742624, 0.00023653933021705598, 8.1033642345573753e-05, 0.00040362161234952509, 0.00018948961223941296, 0.00037870227242819965, 0.00034200612572021782, 0.00014550058403983712, 0.00026150836492888629, 0.00035296406713314354, 0.00016679608961567283, 8.5979350842535496e-05, 0.00015670724678784609, 0.00016957706247922033, 0.00011165226896991953, 0.00041293766116723418, 0.002493101404979825, 0.000284824229311198, 0.00022576173068955541, 0.00018341679242439568, 0.00020873884204775095, 0.00013840472092851996, 0.0002489331818651408, 0.00022050400730222464, 0.00028933014255017042, 9.0055029431823641e-05, 6.4220657804980874e-05, 0.00019649475871119648, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,9,9,-40,-57,-41,26,-41,-20,-18,-2,53,13,0,9,120,-3,34,10,11,-6,-59,36,14,-32,-6,-13,-58,72,-3,-81,64,-1,-86,-33,-13,-61,19,-20,-12,50,-17,-25,9,28,127,21, -127,-57,-22,127,-79,59,-101,127,18,14,37,-6,54,46,1,-42,-17,43,32,9,17,127,3,127,93,-45,-62,44,54,-90,21,-127,127,2,-61,-127,21,4,-20,-59,-125,-4,-52,-107,56,20,60,119, -28,75,12,4,-47,52,29,67,22,-51,17,10,-26,16,4,6,-72,17,-72,-2,18,-14,127,27,-127,1,3,15,34,38,-4,-40,-1,-1,-46,64,3,12,26,2,68,-14,37,-19,-9,30,-13,-11, 
  /* [0][1][][] */ -28,22,-25,14,9,-66,117,-69,21,-15,8,28,127,23,11,-23,-2,-54,33,50,80,-64,30,8,-106,127,-56,-1,127,-58,57,-106,-23,4,-110,20,7,-94,-49,21,116,127,-23,-127,-69,-63,-5,70, 105,-127,127,19,127,58,-75,-40,35,127,127,-127,-98,127,127,127,127,127,122,127,127,83,-2,12,54,-107,-127,127,40,127,127,-26,-45,127,127,110,-127,127,-127,-94,32,30,-127,-34,127,-127,14,26, 1,55,-37,-1,-74,127,-127,109,127,-79,12,74,-39,11,17,-68,14,1,-127,35,42,-97,-36,15,46,-20,-18,105,-45,-11,37,-104,-28,16,73,-66,35,-1,8,-127,125,6,36,26,-56,57,114,-57, 
  /* [0][2][][] */ -32,2,7,-28,-14,-41,-14,-42,-2,-16,-2,4,-14,6,10,3,-47,-8,34,-29,22,6,91,-2,-106,9,84,-8,16,17,-15,11,-23,-5,-93,36,4,-21,8,54,-30,3,-19,-24,-9,-8,-38,-23, 37,-26,-32,-24,18,29,121,-53,116,-42,-13,7,-76,9,-10,-72,-19,97,-1,32,20,52,-42,-21,-125,59,121,-4,-82,32,-31,-43,-39,13,-76,8,56,-47,14,118,-127,5,-35,34,51,16,-2,-127, 0,38,5,-25,-28,32,-5,-15,-9,-30,-43,11,10,13,-4,11,54,27,-40,-4,9,5,-64,-5,14,-36,57,-1,-3,29,-27,-12,9,-11,-67,-72,-6,3,37,-12,-2,-2,18,0,-3,6,69,0, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012293166480958462, 0.0089068971574306488, 0.046981383115053177, 0.0094349831342697144, 0.010473087430000305, 0.019349491223692894, 0.0084891347214579582, 0.012203585356473923, 0.0029540013056248426, 0.017609776929020882, 0.0091398935765028, 0.057538550347089767, 0.018496882170438766, 0.015418595634400845, 0.011937753297388554, 0.029898803681135178, 0.0086881751194596291, 0.004086698405444622, 0.0072501422837376595, 0.010190841741859913, 0.0068872738629579544, 0.010052921250462532, 0.0034439298324286938, 0.017153918743133545, 0.0080533083528280258, 0.016094846650958061, 0.014535260386765003, 0.0061837746761739254, 0.011114105582237244, 0.015000971965491772, 0.0070888334885239601, 0.0036541223526000977, 0.0066600576974451542, 0.007207025308161974, 0.0047452212311327457, 0.017549850046634674, 0.10595680773258209, 0.012105029076337814, 0.0095948735252022743, 0.0077952132560312748, 0.0088714007288217545, 0.0058822007849812508, 0.010579660534858704, 0.0093714203685522079, 0.012296530418097973, 0.0038273385725915432, 0.0027293779421597719, 0.0083510270342230797, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 1425, 3456, 24043, 1019, 4491, -1336, 5583, 23458, 3679, -402, 2926, -1500, 9841, -1643, 2212, 29713, -187, 2748, 280, 2725, 2084, 2465, 421, 19428, 3960, 2920, 15228, 1215, 4710, 3287, 144, 974, 915, 1640, 95, -149, -3717, -140, 2519, 4415, 2455, 1876, 3006, 5092, 2021, 3042, 1902, 4337, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00037033818080089986, 0.00023933332704473287, 4.5490327465813607e-05, 0.0002442333207000047, 0.00014964380534365773, 0.00030472068465314806, 0.00013204901188146323, 4.641855412046425e-05, 0.00014499420649372041, 0.0003321012482047081, 0.0002650490787345916, 0.00027578778099268675, 9.0261222794651985e-05, 0.00026499011437408626, 0.00021895465033594519, 3.9125203329604119e-05, 0.0004315089900046587, 0.00019559766224119812, 0.00037199212238192558, 0.00022474613797385246, 0.00031163616222329438, 0.00029211968649178743, 0.0004421949852257967, 5.3873602155363187e-05, 0.00019848895317409188, 0.00016855058493092656, 7.0866262831259519e-05, 0.00034144253004342318, 0.0001463392109144479, 0.00021969113731756806, 0.00055321864783763885, 0.00041328009683638811, 0.00029141368577256799, 0.0002568214840721339, 0.00038419853080995381, 0.00033902251743711531, 0.00015955381968524307, 0.00049055629642680287, 0.00022974847524892539, 0.00017462580581195652, 0.00025873153936117887, 0.00034802092704921961, 0.00026063519180752337, 0.00017945675062946975, 0.00025737631949596107, 0.00026933461776934564, 0.00035717239370569587, 0.00018398066458757967, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 74,127,-25,-62,47,62,10,37, 
  /* [1][0][][] */ 73,-61,79,-84,-79,120,-127,-52, 
  /* [2][0][][] */ -29,103,120,31,127,15,76,10, 
  /* [3][0][][] */ 91,38,-86,57,-25,-104,-127,-60, 
  /* [4][0][][] */ -42,-2,-27,-110,-68,124,127,65, 
  /* [5][0][][] */ 38,59,-127,-84,-2,53,34,-27, 
  /* [6][0][][] */ 41,127,80,108,54,3,4,-46, 
  /* [7][0][][] */ 123,-18,-58,13,34,31,127,-30, 
  /* [8][0][][] */ 83,127,52,114,108,71,122,-112, 
  /* [9][0][][] */ 59,29,-127,-77,2,54,46,29, 
  /* [10][0][][] */ -90,-43,38,-50,-23,-32,-45,127, 
  /* [11][0][][] */ 41,-90,-127,-28,27,-9,41,-10, 
  /* [12][0][][] */ -22,-83,-59,36,-127,-17,-117,28, 
  /* [13][0][][] */ 27,4,-106,83,-127,-32,-8,-6, 
  /* [14][0][][] */ -88,-69,-127,-28,30,34,-8,-101, 
  /* [15][0][][] */ 45,-119,-127,2,-77,-9,-10,-24, 
  /* [16][0][][] */ 127,-62,-5,76,-75,16,42,95, 
  /* [17][0][][] */ 5,124,127,-12,-40,-21,-47,-41, 
  /* [18][0][][] */ 1,-127,48,79,3,-59,24,-98, 
  /* [19][0][][] */ 127,-38,-81,16,-91,11,28,94, 
  /* [20][0][][] */ -23,-127,92,92,3,-93,-24,-64, 
  /* [21][0][][] */ 15,-40,-7,-19,127,-2,21,19, 
  /* [22][0][][] */ -127,39,-69,49,75,58,-98,-99, 
  /* [23][0][][] */ -127,-75,14,-40,-104,90,120,-41, 
  /* [24][0][][] */ -35,12,-23,-25,-21,68,127,-7, 
  /* [25][0][][] */ -76,-127,-101,-62,-40,-22,8,-76, 
  /* [26][0][][] */ -2,74,3,127,-65,58,-56,-1, 
  /* [27][0][][] */ 1,-127,50,87,26,-57,-17,-121, 
  /* [28][0][][] */ -21,116,58,46,127,-17,27,-94, 
  /* [29][0][][] */ 120,-13,-53,-37,48,-127,-48,36, 
  /* [30][0][][] */ 23,-4,48,-127,35,-5,60,-55, 
  /* [31][0][][] */ 51,-22,21,74,6,21,14,127, 
  /* [32][0][][] */ -84,-50,9,-64,-20,127,45,92, 
  /* [33][0][][] */ -35,58,36,-28,23,127,-116,42, 
  /* [34][0][][] */ 35,121,-127,-59,-11,58,-54,73, 
  /* [35][0][][] */ 11,-127,13,29,-55,-74,43,-75, 
  /* [36][0][][] */ -32,-66,-91,-20,-127,-34,9,0, 
  /* [37][0][][] */ -52,-127,45,53,-58,-57,-15,-34, 
  /* [38][0][][] */ -62,34,43,-59,-127,-94,-63,86, 
  /* [39][0][][] */ 52,-127,112,72,16,-92,-50,-78, 
  /* [40][0][][] */ -15,53,-9,33,-127,-17,-58,12, 
  /* [41][0][][] */ 93,102,-77,-127,27,30,5,17, 
  /* [42][0][][] */ -8,-60,-35,-10,127,-9,53,24, 
  /* [43][0][][] */ 127,38,77,26,-85,-59,57,103, 
  /* [44][0][][] */ 60,13,-6,33,46,-77,-127,17, 
  /* [45][0][][] */ 37,0,11,1,58,-127,-17,-72, 
  /* [46][0][][] */ 66,-33,-7,127,24,47,13,55, 
  /* [47][0][][] */ -125,-61,69,127,-5,8,107,-67, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0045774988830089569, 0.0029582369606941938, 0.00056227506138384342, 0.0030188022647053003, 0.0018496456323191524, 0.0037664456758648157, 0.0016321683069691062, 0.00057374825701117516, 0.0017921749968081713, 0.0041048782877624035, 0.003276091767475009, 0.0034088257234543562, 0.0011156577384099364, 0.0032753630075603724, 0.0027063498273491859, 0.00048360010259784758, 0.005333589855581522, 0.0024176500737667084, 0.0045979423448443413, 0.0027779345400631428, 0.0038519231602549553, 0.003610693383961916, 0.0054656723514199257, 0.000665895058773458, 0.0024533872492611408, 0.0020833394955843687, 0.00087592983618378639, 0.0042203394696116447, 0.0018087996868416667, 0.0027154530398547649, 0.0068379603326320648, 0.0051082749851047993, 0.0036019668914377689, 0.0031743959989398718, 0.0047488175332546234, 0.0041904272511601448, 0.0019721365533769131, 0.0060634338296949863, 0.0028397650457918644, 0.0021584311034530401, 0.0031980050262063742, 0.0043016504496335983, 0.0032215346582233906, 0.0022181430831551552, 0.0031812540255486965, 0.0033290626015514135, 0.0044147656299173832, 0.0022740601561963558, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7583, 14351, -3694, 4437, -3318, 2440, -13372, -14137, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00021755833586212248, 0.00011272424308117479, 0.00013537793711293489, 9.7817865025717765e-05, 0.00018355542852077633, 0.00011965367593802512, 0.00018637163157109171, 0.00011354485468473285, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -36,-3,35,7,-32,-12,8,3,-33,-1,-54,-57,-26,-65,7,-29,62,-44,45,40,-12,27,-50,21,1,-49,63,-23,-9,-21,13,1,73,38,38,-127,22,6,-29,-43,4,-24,54,55,41,3,28,1, 
  /* [1][0][][] */ -16,36,50,-13,-16,54,-54,-28,3,30,-12,-88,13,90,-21,64,-15,6,-24,-74,17,-88,-10,28,-72,-7,1,-112,-54,-14,32,-52,51,90,-47,12,127,-17,14,46,-18,42,-84,-20,116,-27,-26,0, 
  /* [2][0][][] */ 12,-32,-74,25,-6,52,14,-6,3,47,7,28,66,-77,9,-40,45,-96,13,23,-17,45,20,37,-35,57,-13,-78,4,7,26,-72,-40,-82,17,-27,86,33,-4,-53,9,37,87,28,127,19,26,26, 
  /* [3][0][][] */ -25,18,-74,50,16,-28,-64,-93,18,-15,-23,-8,11,30,52,81,2,3,-36,17,14,-101,15,-41,-78,-3,127,-17,-41,11,-60,7,7,-68,19,-2,-13,-33,-11,88,-35,-31,9,22,42,18,-31,51, 
  /* [4][0][][] */ -21,-72,-15,7,39,-24,-13,-13,24,-27,57,-74,5,32,3,3,-16,-26,5,-24,6,-50,13,-15,23,-15,46,42,61,16,-17,23,-17,-4,-4,-3,-75,105,48,-33,29,-11,-17,-12,-73,13,127,17, 
  /* [5][0][][] */ 51,-24,11,17,27,-41,44,-122,41,-23,-26,127,-77,69,20,-62,0,-93,18,3,-53,72,-55,-41,-69,87,-29,-4,-16,56,-30,-41,25,58,47,-1,-29,-13,-45,-45,25,-53,-47,3,-37,65,101,31, 
  /* [6][0][][] */ 54,-21,20,-24,-51,-12,-31,26,-42,-2,-64,127,-35,-43,-18,55,-2,67,8,31,33,-65,-21,11,28,46,-72,4,12,-54,12,47,10,9,-18,2,7,5,13,0,-11,-16,40,57,-6,-37,87,-9, 
  /* [7][0][][] */ 1,4,16,75,23,39,-2,29,24,-10,48,-9,108,111,40,48,45,52,-36,1,13,-24,-107,-6,7,-19,-33,68,22,-34,-24,-9,48,0,34,-113,-82,20,16,66,-44,32,74,127,-74,-34,-114,72, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0092462291941046715, 0.004790780134499073, 0.0057535623200237751, 0.0041572591289877892, 0.0078011052682995796, 0.0050852810963988304, 0.0079207941889762878, 0.0048256563022732735, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 7323, 6675, 4503, -640, 455, 2834, -886, 55185, 3091, 4428, 8230, 60819, 4610, 5781, -816, 13557, -1465, 19074, 2749, 7912, 9605, -119, 4343, -9934, 17933, 108, 9113, 19462, 3614, -1897, -11600, 10578, 1172, -1764, -1747, 3553, -12361, 12440, -1594, 22597, -338, 3220, 4474, -957, -941, 2392, 5645, -291, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.1736837930511683e-05, 0.0001027845501084812, 0.00014886853750795126, 0.00032461146474815905, 0.00094182894099503756, 0.00012993832933716476, 7.2440998337697238e-05, 3.6895315133733675e-05, 9.9498276540543884e-05, 6.9903515395708382e-05, 5.5603530199732631e-05, 6.5544605604372919e-05, 7.2604940214660019e-05, 6.9068541051819921e-05, 0.00029645382892340422, 0.00013040598423685879, 0.00014357244072016329, 0.00032732199179008603, 0.00011649068619590253, 0.00012254185276106, 6.6816115577239543e-05, 0.00051587028428912163, 0.00016519930795766413, 0.00019145781698171049, 7.8104720159899443e-05, 0.00032748468220233917, 4.0602437366032973e-05, 6.7478278651833534e-05, 0.00018758610531222075, 0.00068418314913287759, 0.00025596641353331506, 7.1587433922104537e-05, 8.0672994954511523e-05, 0.00011212956451345235, 0.00020788257825188339, 8.506097219651565e-05, 5.0951279263244942e-05, 4.5144064642954618e-05, 0.0001489364804001525, 5.8765195717569441e-05, 0.00013659312389791012, 0.00014838477363809943, 8.7900159996934235e-05, 8.500950934831053e-05, 7.2129420004785061e-05, 0.00038220011629164219, 6.7867782490793616e-05, 0.00023430505825672299, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -44,-97,-58,-42,127,-75,37,-98,-94,-84,-14,-66,97,52,104,-127,54,-46,-12,-37,-115,11,34,20,-46,61,80,-62,50,-74,29,-39,-105,-87,35,49,44,95,127,-52,-127,-34,55,45,47,-127,93,73, -93,-63,-78,23,-37,76,40,-115,-87,20,43,-127,104,103,96,-127,-70,-118,26,-36,-61,20,-51,127,-106,127,112,-127,69,-41,21,-90,-47,-100,79,127,86,119,120,-127,-127,-47,16,107,64,100,66,60, 26,-40,-127,59,-39,-49,33,-46,62,5,74,-89,5,49,-56,30,-64,-16,32,-52,-38,52,-84,-30,-80,43,23,-71,39,47,127,-79,22,0,-8,13,98,79,29,7,-25,32,50,34,43,23,47,-110, 
  /* [0][1][][] */ -58,-68,-71,-44,-65,-89,105,-115,-127,-127,111,-116,127,59,-127,-127,127,-127,-78,-96,-78,40,-23,6,-54,41,127,-104,-116,-72,16,-102,-100,-127,-127,68,44,99,9,-117,57,-35,108,52,93,86,86,-127, -127,-70,-80,-62,-13,127,127,-127,68,29,127,-116,113,127,64,-117,50,-123,-127,-127,-109,127,-127,116,-127,30,107,-117,-127,127,0,-127,-127,-102,72,94,127,127,-35,-124,96,-92,127,127,127,-19,127,119, -13,-102,-122,127,45,-25,93,-40,55,15,60,-57,-14,79,84,-46,11,3,-18,-83,-127,54,-10,-31,-87,-4,72,-62,-44,47,97,-50,-27,-6,94,32,98,50,-41,-17,32,127,43,34,67,-64,23,38, 
  /* [0][2][][] */ -101,-30,-66,22,-39,-44,38,-38,3,-54,53,-55,35,0,-51,-23,-91,-36,87,-58,-48,-66,-106,3,-36,46,55,-35,28,45,11,-17,-47,-93,-64,37,37,59,-68,-57,13,-31,68,-3,36,38,26,-78, -52,-127,-13,-49,68,47,79,-33,51,3,-48,-39,26,4,-94,-84,25,-4,47,-109,-28,70,-100,44,-46,3,62,-42,20,8,-22,-75,-54,5,-83,11,25,72,-64,-105,15,-50,92,73,50,-110,38,14, 20,-74,-99,-3,-46,-24,55,-47,-71,22,-34,-12,-24,25,38,-7,43,29,-13,-68,-30,12,17,-24,-36,-23,51,-31,-9,-52,33,-62,-50,-5,19,30,67,68,-25,-33,-3,69,8,27,12,-15,27,50, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038988154847174883, 0.0043683433905243874, 0.0063269129022955894, 0.013795986771583557, 0.040027730166912079, 0.0055223791860044003, 0.0030787424184381962, 0.0015680508222430944, 0.0042286766692996025, 0.0029708994552493095, 0.0023631500080227852, 0.0027856456581503153, 0.0030857098754495382, 0.0029354128055274487, 0.012599287554621696, 0.0055422540754079819, 0.0061018285341560841, 0.01391118485480547, 0.0049508539959788322, 0.0052080289460718632, 0.0028396847192198038, 0.021924486383795738, 0.0070209703408181667, 0.0081369569525122643, 0.0033194506540894508, 0.013918098993599415, 0.0017256035935133696, 0.0028678267262876034, 0.0079724090173840523, 0.029077783226966858, 0.01087857224047184, 0.0030424657743424177, 0.0034286021254956722, 0.0047655063681304455, 0.0088350092992186546, 0.0036150913219898939, 0.0021654292941093445, 0.0019186227582395077, 0.0063298004679381847, 0.0024975207634270191, 0.0058052078820765018, 0.0063063530251383781, 0.0037357567343860865, 0.0036129041109234095, 0.0030655001755803823, 0.016243504360318184, 0.0028843807522207499, 0.0099579645320773125, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 789, -413, -756, 1036, 6802, 2025, -447, 3085, 1438, 1133, 295, 8744, 758, 663, -1241, 763, 3328, 10558, 2255, -575, 618, -1007, 65, 3709, -379, -1871, 1324, 61, 2854, 8449, 3222, -254, 371, -316, 3780, 44, 218, -522, 2246, 1043, 1573, 1649, 63, 28, 1170, 2020, 457, 105, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00052002229494974017, 0.00052328885067254305, 0.00035511786700226367, 0.00038664427120238543, 0.00014010473387315869, 0.00035803543869405985, 0.00043996385647915304, 0.00025657701189629734, 0.00037528402754105628, 0.00063520082039758563, 0.00038625384331680834, 0.00012783969577867538, 0.00030849871109239757, 0.00048987689660862088, 0.00030321849044412374, 0.00034611715818755329, 0.0002277388412039727, 9.4181443273555487e-05, 0.00036117361742071807, 0.00043699727393686771, 0.00057292153360322118, 0.00022498721955344081, 0.00061617349274456501, 0.00022969224664848298, 0.00035757187288254499, 0.00044010087731294334, 0.00032868684502318501, 0.00098777201492339373, 0.00028428700170479715, 0.00010708498302847147, 0.00025860560708679259, 0.00067680928623303771, 0.00045338348718360066, 0.00041902463999576867, 0.0002349953429074958, 0.00039244774961844087, 0.00064407725585624576, 0.00052833819063380361, 0.00029308514785952866, 0.0005921602132730186, 0.00030402670381590724, 0.00038729156949557364, 0.00044641073327511549, 0.00059142569079995155, 0.00033186771906912327, 0.00026751251425594091, 0.00044680843711830676, 0.00042235208093188703, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -55,6,-21,-18,-100,-8,-127,33, 
  /* [1][0][][] */ 82,-53,-38,-42,127,-78,44,26, 
  /* [2][0][][] */ -127,84,-81,-112,40,14,-45,63, 
  /* [3][0][][] */ 35,46,69,-6,100,108,127,14, 
  /* [4][0][][] */ -61,-127,67,3,-18,-65,-43,-36, 
  /* [5][0][][] */ 127,-36,80,47,-97,-15,17,-24, 
  /* [6][0][][] */ 34,47,127,-31,57,-49,-38,23, 
  /* [7][0][][] */ 14,-6,-127,-23,-49,100,80,-60, 
  /* [8][0][][] */ -14,127,-44,-6,69,59,20,86, 
  /* [9][0][][] */ -2,106,-50,73,15,-59,31,127, 
  /* [10][0][][] */ 3,-107,-9,-20,-72,-127,-67,-81, 
  /* [11][0][][] */ -127,-94,85,60,-28,-83,93,44, 
  /* [12][0][][] */ -62,35,-127,43,13,-55,-43,48, 
  /* [13][0][][] */ 100,-127,96,77,19,43,27,-40, 
  /* [14][0][][] */ -107,104,-75,-127,-26,-84,-10,-116, 
  /* [15][0][][] */ 33,114,18,-22,28,-55,86,-127, 
  /* [16][0][][] */ -105,-127,-87,90,-70,-22,4,93, 
  /* [17][0][][] */ -21,-82,-127,60,-39,57,-56,46, 
  /* [18][0][][] */ -84,-73,-40,30,-5,57,-18,127, 
  /* [19][0][][] */ 71,-127,81,-89,-1,-57,30,-54, 
  /* [20][0][][] */ -5,47,7,17,31,127,83,-1, 
  /* [21][0][][] */ 34,120,41,-43,47,-62,91,-127, 
  /* [22][0][][] */ 18,11,111,5,-10,127,54,-50, 
  /* [23][0][][] */ -86,-67,36,-83,84,89,-19,-127, 
  /* [24][0][][] */ -109,-102,29,-102,108,127,-36,-115, 
  /* [25][0][][] */ 127,7,-62,-9,1,39,-75,7, 
  /* [26][0][][] */ -127,-59,-126,-20,-82,-51,7,-10, 
  /* [27][0][][] */ 76,30,11,-58,-127,-25,78,75, 
  /* [28][0][][] */ -125,-66,33,54,-49,-127,-31,25, 
  /* [29][0][][] */ 83,127,4,-96,8,8,-36,-25, 
  /* [30][0][][] */ -72,-48,51,-86,80,54,-32,-127, 
  /* [31][0][][] */ 30,32,-11,127,-15,-56,2,14, 
  /* [32][0][][] */ -54,127,-54,40,24,87,-10,60, 
  /* [33][0][][] */ -41,127,-108,45,14,-28,-34,8, 
  /* [34][0][][] */ -92,-101,-69,127,-18,-6,36,61, 
  /* [35][0][][] */ -44,127,-30,-12,62,113,46,90, 
  /* [36][0][][] */ 66,17,-15,-17,-127,-1,72,97, 
  /* [37][0][][] */ -62,127,38,21,-118,116,-40,-118, 
  /* [38][0][][] */ 36,32,34,38,127,82,109,77, 
  /* [39][0][][] */ -3,-53,33,-25,34,42,-100,127, 
  /* [40][0][][] */ -61,-121,-101,127,-26,-49,35,63, 
  /* [41][0][][] */ 127,4,55,107,-16,-22,-12,-30, 
  /* [42][0][][] */ -53,-3,-63,-127,50,-90,32,65, 
  /* [43][0][][] */ 17,-22,105,-9,30,127,99,-1, 
  /* [44][0][][] */ -41,-38,-59,127,24,13,-44,-32, 
  /* [45][0][][] */ 84,94,118,-60,25,-68,32,-127, 
  /* [46][0][][] */ -26,-92,-30,19,-3,44,-56,127, 
  /* [47][0][][] */ 48,61,127,9,92,87,96,-57, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.004757703747600317, 0.0047875894233584404, 0.0032489867880940437, 0.0035374229773879051, 0.0012818234972655773, 0.0032756796572357416, 0.0040252460166811943, 0.0023474327754229307, 0.0034334876108914614, 0.0058114761486649513, 0.0035338508896529675, 0.0011696101864799857, 0.0028224664274603128, 0.0044819023460149765, 0.002774157328531146, 0.0031666390132158995, 0.0020835911855101585, 0.00086166959954425693, 0.0033043909352272749, 0.0039981044828891754, 0.0052416808903217316, 0.0020584166049957275, 0.0056373942643404007, 0.0021014630328863859, 0.0032714386470615864, 0.0040264995768666267, 0.0030071684159338474, 0.009037163108587265, 0.0026009525172412395, 0.0009797245729714632, 0.0023659924045205116, 0.0061921537853777409, 0.0041480227373540401, 0.0038336722645908594, 0.0021499812137335539, 0.0035905193071812391, 0.0058926870115101337, 0.0048337862826883793, 0.0026814471930265427, 0.0054176962003111839, 0.0027815517969429493, 0.0035433452576398849, 0.0040842285379767418, 0.0054109757766127586, 0.0030362703837454319, 0.0024474821984767914, 0.0040878672152757645, 0.0038641151040792465, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7797, -3705, 12473, -10754, 22508, 6607, -10722, 11352, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00019876277656294405, 0.00025343991001136601, 0.00015645087114535272, 0.00024788593873381615, 0.0002049645408987999, 0.00018729684234131128, 0.00017234322149306536, 0.00026496953796595335, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -3,-5,-17,-57,-25,-31,9,-26,31,10,-10,-3,95,127,-16,-91, 
  /* [1][0][][] */ 127,-43,-40,12,-36,62,-69,-41,-41,72,-22,-37,-17,8,-48,-10, 
  /* [2][0][][] */ -25,-92,26,28,35,-60,-63,-22,22,-79,16,-127,33,-14,-70,13, 
  /* [3][0][][] */ 19,11,21,21,-8,80,-51,2,127,40,1,19,12,-27,11,22, 
  /* [4][0][][] */ -82,-29,-19,-127,-17,28,50,-119,13,-15,-63,-28,-107,20,-36,-16, 
  /* [5][0][][] */ 69,39,58,-11,42,-47,-98,-127,-15,-61,69,34,-44,33,57,-43, 
  /* [6][0][][] */ 102,44,-127,-72,31,-68,0,-71,-28,14,-127,95,92,-83,22,77, 
  /* [7][0][][] */ -127,1,83,-27,-61,5,-1,-53,-40,66,77,-22,62,-23,25,18, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0084474179893732071, 0.010771196335554123, 0.0066491616889834404, 0.01053515262901783, 0.0087109925225377083, 0.007960115559399128, 0.0073245866224169731, 0.011261205188930035, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 18063, -1025, -433, 5154, -893, 506, 12901, 1203, 194, 295, -1740, 2741, 3081, 1160, -509, -1878, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00013306624896358699, 0.00024957139976322651, 0.00013701815623790026, 0.00016793294344097376, 0.00089055957505479455, 0.00079271214781329036, 0.00011577812256291509, 0.0010568288853392005, 0.00038197904359549284, 0.0010453712893649936, 0.00024518172722309828, 0.00017110696353483945, 8.7948777945712209e-05, 0.00045393811888061464, 0.00024278677301481366, 0.0003171015705447644, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -12,-5,6,0,-8,10,10,13,-16,-10,-4,-8,8,-4,15,3, 3,-28,-4,-4,20,-1,6,-27,-11,9,-19,93,-14,28,-7,9, -4,-7,-13,-3,-6,-12,3,9,2,2,-11,-2,2,-10,-13,8, 
  /* [0][1][][] */ 14,5,-2,0,127,-25,-127,-23,127,127,2,-2,123,-32,-2,-21, -127,127,127,-5,-79,-91,-18,-101,16,-106,127,127,127,127,127,127, 10,5,-22,-1,-19,127,0,-11,-9,-14,-1,0,-2,-18,0,-4, 
  /* [0][2][][] */ 17,8,5,-21,-19,14,67,7,-21,-8,15,-16,13,-6,-7,-15, 38,-31,-5,-127,9,-16,4,127,-7,1,-11,-24,-7,-70,-18,-39, 1,0,-8,-13,-12,-4,-2,-2,-7,0,3,2,-7,-18,-4,-7, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.005655315238982439, 0.010606784373521805, 0.0058232713490724564, 0.0071371500380337238, 0.037848781794309616, 0.033690266311168671, 0.0049205701798200607, 0.044915225356817245, 0.016234109178185463, 0.044428277760744095, 0.010420223698019981, 0.0072720455937087536, 0.0037378228735178709, 0.019292369484901428, 0.010318437591195107, 0.013476816937327385, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 1724, 3239, -581, 2286, 51513, 53446, 4394, -766, 7839, -1695, 2094, 2529, 1849, -6652, 2332, 42059, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00033468019682914019, 0.00085961102740839124, 0.000442423828644678, 0.0001928803394548595, 3.4910761314677075e-05, 3.6300698411650956e-05, 0.00017383742670062929, 2.5493645807728171e-05, 0.00016568375576753169, 6.3326813688036054e-05, 0.00069623574381694198, 0.00071499956538900733, 0.00033592543331906199, 2.1386924345279112e-05, 0.0007936666370369494, 6.0754129663109779e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -93, -117, -27, 
  /* [0][1][][] */ 65, -41, 22, 
  /* [0][2][][] */ 29, 127, 23, 
  /* [1][0][][] */ 99, -95, -14, 
  /* [1][1][][] */ -127, 98, 19, 
  /* [1][2][][] */ 10, -5, -16, 
  /* [2][0][][] */ -23, -2, -45, 
  /* [2][1][][] */ 35, 94, 127, 
  /* [2][2][][] */ -12, -92, -75, 
  /* [3][0][][] */ 122, 127, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 13, -68, -9, 
  /* [4][1][][] */ 22, -127, 12, 
  /* [4][2][][] */ 0, -84, 6, 
  /* [5][0][][] */ -54, 23, -4, 
  /* [5][1][][] */ -127, 22, 0, 
  /* [5][2][][] */ -122, 4, -6, 
  /* [6][0][][] */ -16, 79, 127, 
  /* [6][1][][] */ -50, 55, -16, 
  /* [6][2][][] */ -36, -53, -89, 
  /* [7][0][][] */ 31, 36, -37, 
  /* [7][1][][] */ 127, 117, 2, 
  /* [7][2][][] */ 69, 38, 2, 
  /* [8][0][][] */ -22, -32, 51, 
  /* [8][1][][] */ -56, -89, 127, 
  /* [8][2][][] */ -28, -63, 96, 
  /* [9][0][][] */ -35, 71, -5, 
  /* [9][1][][] */ -32, 127, -10, 
  /* [9][2][][] */ -23, 79, -11, 
  /* [10][0][][] */ 23, 84, 10, 
  /* [10][1][][] */ -38, -127, -31, 
  /* [10][2][][] */ 10, 38, 15, 
  /* [11][0][][] */ 5, -21, 7, 
  /* [11][1][][] */ 63, -97, 33, 
  /* [11][2][][] */ -89, 127, -50, 
  /* [12][0][][] */ -38, 54, -7, 
  /* [12][1][][] */ -127, 120, 9, 
  /* [12][2][][] */ -77, 85, 9, 
  /* [13][0][][] */ 127, 63, 13, 
  /* [13][1][][] */ 73, 79, -17, 
  /* [13][2][][] */ 45, 105, 27, 
  /* [14][0][][] */ -32, -30, 44, 
  /* [14][1][][] */ 41, 94, -127, 
  /* [14][2][][] */ -18, -71, 77, 
  /* [15][0][][] */ -121, -65, -1, 
  /* [15][1][][] */ -109, -127, 14, 
  /* [15][2][][] */ 10, -48, 5, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.085343442857265472, 0.21920080482959747, 0.11281806975603104, 0.049184482544660568, 0.0089022433385252953, 0.0092566777020692825, 0.044328540563583374, 0.0065008793026208878, 0.042249355465173721, 0.016148336231708527, 0.17754010856151581, 0.18232487142086029, 0.085660979151725769, 0.0054536652751266956, 0.20238497853279114, 0.015492302365601063, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10930111259222031, } };
const TfArray<1, int> quant46_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.080904044210910797, } };
const TfArray<1, int> quant50_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.073880031704902649, } };
const TfArray<1, int> quant53_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.09564787894487381, } };
const TfArray<1, int> quant54_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.067861326038837433, } };
const TfArray<1, int> quant58_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.062465306371450424, } };
const TfArray<1, int> quant61_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.10577229410409927, } };
const TfArray<1, int> quant62_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.06467457115650177, } };
const TfArray<1, int> quant65_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.15177524089813232, } };
const TfArray<1, int> quant66_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.051491644233465195, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.12147427350282669, } };
const TfArray<1, int> quant69_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
